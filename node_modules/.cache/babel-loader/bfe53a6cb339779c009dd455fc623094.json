{"ast":null,"code":"var _jsxFileName = \"/Users/rogetgeoffroy/Desktop/Folders/react_js_folder/react-live-search-app/live-search/src/components/bookItems.js\";\nimport React, { Component } from 'react'; //import PropTypes from 'prop-types';\n\nimport axios from 'axios'; //axios.get('https://jsonplaceholder.typicode.com/users')\n\nexport default class BookItems extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      posts: [],\n      isLoading: true,\n      errors: null,\n      value: ''\n    };\n  }\n\n  // Now we're going to make a request for data using axios\n  getPosts() {\n    axios // This is where the data is hosted\n    //.get(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/3/posts.json\")\n    .get('https://jsonplaceholder.typicode.com/users') // Once we get a response and store data, let's change the loading state\n    .then(response => {\n      this.setState({\n        posts: response.data,\n        isLoading: false\n      });\n    }) // If we catch any errors connecting, let's update accordingly\n    .catch(error => this.setState({\n      error,\n      isLoading: false\n    }));\n  } // Let's our app know we're ready to render the data\n\n\n  componentDidMount() {\n    this.getPosts();\n  } // Putting that data to use\n\n\n  render() {\n    const {\n      isLoading,\n      posts\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    }, \"Random Post\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }, !isLoading ? posts.map(post => {\n      //const { _id, title, content } = post;\n      return (\n        /*#__PURE__*/\n\n        /* \n        <div key={_id}>\n        <h2>{title}</h2>\n        <p>{content}</p>\n        */\n        React.createElement(\"div\", {\n          key: post.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"h2\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 21\n          }\n        }, post.name), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 21\n          }\n        }, post.email), /*#__PURE__*/React.createElement(\"hr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 21\n          }\n        }))\n      );\n    }) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, \"Loading...\")));\n  }\n\n}","map":{"version":3,"sources":["/Users/rogetgeoffroy/Desktop/Folders/react_js_folder/react-live-search-app/live-search/src/components/bookItems.js"],"names":["React","Component","axios","BookItems","state","posts","isLoading","errors","value","getPosts","get","then","response","setState","data","catch","error","componentDidMount","render","map","post","id","name","email"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,eAAe,MAAMC,SAAN,SAAwBF,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAE7CG,KAF6C,GAErC;AACJC,MAAAA,KAAK,EAAE,EADH;AAEJC,MAAAA,SAAS,EAAE,IAFP;AAGJC,MAAAA,MAAM,EAAE,IAHJ;AAIJC,MAAAA,KAAK,EAAE;AAJH,KAFqC;AAAA;;AAQ7C;AACAC,EAAAA,QAAQ,GAAG;AACPP,IAAAA,KAAK,CACL;AACA;AAFK,KAGJQ,GAHD,CAGK,4CAHL,EAIA;AAJA,KAKCC,IALD,CAKMC,QAAQ,IAAI;AACd,WAAKC,QAAL,CAAc;AACdR,QAAAA,KAAK,EAAEO,QAAQ,CAACE,IADF;AAEdR,QAAAA,SAAS,EAAE;AAFG,OAAd;AAIH,KAVD,EAWA;AAXA,KAYCS,KAZD,CAYOC,KAAK,IAAI,KAAKH,QAAL,CAAc;AAAEG,MAAAA,KAAF;AAASV,MAAAA,SAAS,EAAE;AAApB,KAAd,CAZhB;AAaH,GAvB4C,CAwB7C;;;AACAW,EAAAA,iBAAiB,GAAG;AAChB,SAAKR,QAAL;AACH,GA3B4C,CA4B7C;;;AACAS,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEZ,MAAAA,SAAF;AAAaD,MAAAA;AAAb,QAAuB,KAAKD,KAAlC;AACA,wBACA,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,CAACE,SAAD,GACGD,KAAK,CAACc,GAAN,CAAUC,IAAI,IAAI;AAClB;AACA;AAAA;;AACI;;;;;AAKA;AAAK,UAAA,GAAG,EAAEA,IAAI,CAACC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKD,IAAI,CAACE,IAAV,CADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAIF,IAAI,CAACG,KAAT,CAFA,eAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHA;AANJ;AAYC,KAdD,CADH,gBAiBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAlBJ,CAFJ,CADA;AA0BH;;AAzD4C","sourcesContent":["import React, { Component } from 'react'\n//import PropTypes from 'prop-types';\nimport axios from 'axios';\n\n//axios.get('https://jsonplaceholder.typicode.com/users')\nexport default class BookItems extends Component {\n    // State will apply to the posts object which is set to loading by default\n    state = {\n        posts: [],\n        isLoading: true,\n        errors: null,\n        value: ''\n    };\n    // Now we're going to make a request for data using axios\n    getPosts() {\n        axios\n        // This is where the data is hosted\n        //.get(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/3/posts.json\")\n        .get('https://jsonplaceholder.typicode.com/users')\n        // Once we get a response and store data, let's change the loading state\n        .then(response => {\n            this.setState({\n            posts: response.data,\n            isLoading: false\n            });\n        })\n        // If we catch any errors connecting, let's update accordingly\n        .catch(error => this.setState({ error, isLoading: false }));\n    }\n    // Let's our app know we're ready to render the data\n    componentDidMount() {\n        this.getPosts();\n    }\n    // Putting that data to use\n    render() {\n        const { isLoading, posts } = this.state;\n        return (\n        <React.Fragment>\n            <h2>Random Post</h2>\n            <div>\n            {!isLoading ? (\n                posts.map(post => {\n                //const { _id, title, content } = post;\n                return (\n                    /* \n                    <div key={_id}>\n                    <h2>{title}</h2>\n                    <p>{content}</p>\n                    */\n                    <div key={post.id}>\n                    <h2>{post.name}</h2>\n                    <p>{post.email}</p>\n                    <hr />\n                    </div>\n                );\n                })\n            ) : (\n                <p>Loading...</p>\n            )}\n            </div>\n        </React.Fragment>\n        );\n    }\n }\n \n"]},"metadata":{},"sourceType":"module"}