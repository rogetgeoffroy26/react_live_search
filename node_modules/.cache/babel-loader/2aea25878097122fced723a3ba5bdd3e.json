{"ast":null,"code":"/**\n * @preserve XDate v@VERSION\n * Docs & Licensing: http://arshaw.com/xdate/\n */\n\n/*\n * Internal Architecture\n * ---------------------\n * An XDate wraps a native Date. The native Date is stored in the '0' property of the object.\n * UTC-mode is determined by whether the internal native Date's toString method is set to\n * Date.prototype.toUTCString (see getUTCMode).\n *\n */\nvar XDate = function (Date, Math, Array, undefined) {\n  /** @const */\n  var FULLYEAR = 0;\n  /** @const */\n\n  var MONTH = 1;\n  /** @const */\n\n  var DATE = 2;\n  /** @const */\n\n  var HOURS = 3;\n  /** @const */\n\n  var MINUTES = 4;\n  /** @const */\n\n  var SECONDS = 5;\n  /** @const */\n\n  var MILLISECONDS = 6;\n  /** @const */\n\n  var DAY = 7;\n  /** @const */\n\n  var YEAR = 8;\n  /** @const */\n\n  var WEEK = 9;\n  /** @const */\n\n  var DAY_MS = 86400000;\n  var ISO_FORMAT_STRING = \"yyyy-MM-dd'T'HH:mm:ss(.fff)\";\n  var ISO_FORMAT_STRING_TZ = ISO_FORMAT_STRING + \"zzz\";\n  var methodSubjects = ['FullYear', // 0\n  'Month', // 1\n  'Date', // 2\n  'Hours', // 3\n  'Minutes', // 4\n  'Seconds', // 5\n  'Milliseconds', // 6\n  'Day', // 7\n  'Year' // 8\n  ];\n  var subjectPlurals = ['Years', // 0\n  'Months', // 1\n  'Days' // 2\n  ];\n  var unitsWithin = [12, // months in year\n  31, // days in month (sort of)\n  24, // hours in day\n  60, // minutes in hour\n  60, // seconds in minute\n  1000, // milliseconds in second\n  1 //\n  ];\n  var formatStringRE = new RegExp(\"(([a-zA-Z])\\\\2*)|\" + // 1, 2\n  \"(\\\\(\" + \"(('.*?'|\\\\(.*?\\\\)|.)*?)\" + \"\\\\))|\" + // 3, 4, 5 (allows for 1 level of inner quotes or parens)\n  \"('(.*?)')\" // 6, 7\n  );\n  var UTC = Date.UTC;\n  var toUTCString = Date.prototype.toUTCString;\n  var proto = XDate.prototype; // This makes an XDate look pretty in Firebug and Web Inspector.\n  // It makes an XDate seem array-like, and displays [ <internal-date>.toString() ]\n\n  proto.length = 1;\n  proto.splice = Array.prototype.splice;\n  /* Constructor\n  ---------------------------------------------------------------------------------*/\n  // TODO: in future, I'd change signature for the constructor regarding the `true` utc-mode param. ~ashaw\n  //   I'd move the boolean to be the *first* argument. Still optional. Seems cleaner.\n  //   I'd remove it from the `xdate`, `nativeDate`, and `milliseconds` constructors.\n  //      (because you can simply call .setUTCMode(true) after)\n  //   And I'd only leave it for the y/m/d/h/m/s/m and `dateString` constructors\n  //      (because those are the only constructors that need it for DST-gap data-loss reasons)\n  //   Should do this for 1.0\n\n  function XDate() {\n    return init(this instanceof XDate ? this : new XDate(), arguments);\n  }\n\n  function init(xdate, args) {\n    var len = args.length;\n    var utcMode;\n\n    if (isBoolean(args[len - 1])) {\n      utcMode = args[--len];\n      args = slice(args, 0, len);\n    }\n\n    if (!len) {\n      xdate[0] = new Date();\n    } else if (len == 1) {\n      var arg = args[0];\n\n      if (arg instanceof Date) {\n        xdate[0] = new Date(arg.getTime());\n      } else if (isNumber(arg)) {\n        xdate[0] = new Date(arg);\n      } else if (arg instanceof XDate) {\n        xdate[0] = _clone(arg);\n      } else if (isString(arg)) {\n        xdate[0] = new Date(0);\n        xdate = parse(arg, utcMode || false, xdate);\n      }\n    } else {\n      xdate[0] = new Date(UTC.apply(Date, args));\n\n      if (!utcMode) {\n        xdate[0] = coerceToLocal(xdate[0]);\n      }\n    }\n\n    if (isBoolean(utcMode)) {\n      setUTCMode(xdate, utcMode);\n    }\n\n    return xdate;\n  }\n  /* UTC Mode Methods\n  ---------------------------------------------------------------------------------*/\n\n\n  proto.getUTCMode = methodize(getUTCMode);\n\n  function getUTCMode(xdate) {\n    return xdate[0].toString === toUTCString;\n  }\n\n  ;\n  proto.setUTCMode = methodize(setUTCMode);\n\n  function setUTCMode(xdate, utcMode, doCoercion) {\n    if (utcMode) {\n      if (!getUTCMode(xdate)) {\n        if (doCoercion) {\n          xdate[0] = coerceToUTC(xdate[0]);\n        }\n\n        xdate[0].toString = toUTCString;\n      }\n    } else {\n      if (getUTCMode(xdate)) {\n        if (doCoercion) {\n          xdate[0] = coerceToLocal(xdate[0]);\n        } else {\n          xdate[0] = new Date(xdate[0].getTime());\n        } // toString will have been cleared\n\n      }\n    }\n\n    return xdate; // for chaining\n  }\n\n  proto.getTimezoneOffset = function () {\n    if (getUTCMode(this)) {\n      return 0;\n    } else {\n      return this[0].getTimezoneOffset();\n    }\n  };\n  /* get / set / add / diff Methods (except for week-related)\n  ---------------------------------------------------------------------------------*/\n\n\n  each(methodSubjects, function (subject, fieldIndex) {\n    proto['get' + subject] = function () {\n      return _getField(this[0], getUTCMode(this), fieldIndex);\n    };\n\n    if (fieldIndex != YEAR) {\n      // because there is no getUTCYear\n      proto['getUTC' + subject] = function () {\n        return _getField(this[0], true, fieldIndex);\n      };\n    }\n\n    if (fieldIndex != DAY) {\n      // because there is no setDay or setUTCDay\n      // and the add* and diff* methods use DATE instead\n      proto['set' + subject] = function (value) {\n        _set(this, fieldIndex, value, arguments, getUTCMode(this));\n\n        return this; // for chaining\n      };\n\n      if (fieldIndex != YEAR) {\n        // because there is no setUTCYear\n        // and the add* and diff* methods use FULLYEAR instead\n        proto['setUTC' + subject] = function (value) {\n          _set(this, fieldIndex, value, arguments, true);\n\n          return this; // for chaining\n        };\n\n        proto['add' + (subjectPlurals[fieldIndex] || subject)] = function (delta, preventOverflow) {\n          _add(this, fieldIndex, delta, preventOverflow);\n\n          return this; // for chaining\n        };\n\n        proto['diff' + (subjectPlurals[fieldIndex] || subject)] = function (otherDate) {\n          return _diff(this, otherDate, fieldIndex);\n        };\n      }\n    }\n  });\n\n  function _set(xdate, fieldIndex, value, args, useUTC) {\n    var getField = curry(_getField, xdate[0], useUTC);\n    var setField = curry(_setField, xdate[0], useUTC);\n    var expectedMonth;\n    var preventOverflow = false;\n\n    if (args.length == 2 && isBoolean(args[1])) {\n      preventOverflow = args[1];\n      args = [value];\n    }\n\n    if (fieldIndex == MONTH) {\n      expectedMonth = (value % 12 + 12) % 12;\n    } else {\n      expectedMonth = getField(MONTH);\n    }\n\n    setField(fieldIndex, args);\n\n    if (preventOverflow && getField(MONTH) != expectedMonth) {\n      setField(MONTH, [getField(MONTH) - 1]);\n      setField(DATE, [getDaysInMonth(getField(FULLYEAR), getField(MONTH))]);\n    }\n  }\n\n  function _add(xdate, fieldIndex, delta, preventOverflow) {\n    delta = Number(delta);\n    var intDelta = Math.floor(delta);\n    xdate['set' + methodSubjects[fieldIndex]](xdate['get' + methodSubjects[fieldIndex]]() + intDelta, preventOverflow || false);\n\n    if (intDelta != delta && fieldIndex < MILLISECONDS) {\n      _add(xdate, fieldIndex + 1, (delta - intDelta) * unitsWithin[fieldIndex], preventOverflow);\n    }\n  }\n\n  function _diff(xdate1, xdate2, fieldIndex) {\n    // fieldIndex=FULLYEAR is for years, fieldIndex=DATE is for days\n    xdate1 = xdate1.clone().setUTCMode(true, true);\n    xdate2 = XDate(xdate2).setUTCMode(true, true);\n    var v = 0;\n\n    if (fieldIndex == FULLYEAR || fieldIndex == MONTH) {\n      for (var i = MILLISECONDS, methodName; i >= fieldIndex; i--) {\n        v /= unitsWithin[i];\n        v += _getField(xdate2, false, i) - _getField(xdate1, false, i);\n      }\n\n      if (fieldIndex == MONTH) {\n        v += (xdate2.getFullYear() - xdate1.getFullYear()) * 12;\n      }\n    } else if (fieldIndex == DATE) {\n      var clear1 = xdate1.toDate().setUTCHours(0, 0, 0, 0); // returns an ms value\n\n      var clear2 = xdate2.toDate().setUTCHours(0, 0, 0, 0); // returns an ms value\n\n      v = Math.round((clear2 - clear1) / DAY_MS) + (xdate2 - clear2 - (xdate1 - clear1)) / DAY_MS;\n    } else {\n      v = (xdate2 - xdate1) / [3600000, // milliseconds in hour\n      60000, // milliseconds in minute\n      1000, // milliseconds in second\n      1 //\n      ][fieldIndex - 3];\n    }\n\n    return v;\n  }\n  /* Week Methods\n  ---------------------------------------------------------------------------------*/\n\n\n  proto.getWeek = function () {\n    return _getWeek(curry(_getField, this, false));\n  };\n\n  proto.getUTCWeek = function () {\n    return _getWeek(curry(_getField, this, true));\n  };\n\n  proto.setWeek = function (n, year) {\n    _setWeek(this, n, year, false);\n\n    return this; // for chaining\n  };\n\n  proto.setUTCWeek = function (n, year) {\n    _setWeek(this, n, year, true);\n\n    return this; // for chaining\n  };\n\n  proto.addWeeks = function (delta) {\n    return this.addDays(Number(delta) * 7);\n  };\n\n  proto.diffWeeks = function (otherDate) {\n    return _diff(this, otherDate, DATE) / 7;\n  };\n\n  function _getWeek(getField) {\n    return getWeek(getField(FULLYEAR), getField(MONTH), getField(DATE));\n  }\n\n  function getWeek(year, month, date) {\n    var d = new Date(UTC(year, month, date));\n    var week1 = getWeek1(getWeekYear(year, month, date));\n    return Math.floor(Math.round((d - week1) / DAY_MS) / 7) + 1;\n  }\n\n  function getWeekYear(year, month, date) {\n    // get the year that the date's week # belongs to\n    var d = new Date(UTC(year, month, date));\n\n    if (d < getWeek1(year)) {\n      return year - 1;\n    } else if (d >= getWeek1(year + 1)) {\n      return year + 1;\n    }\n\n    return year;\n  }\n\n  function getWeek1(year) {\n    // returns Date of first week of year, in UTC\n    var d = new Date(UTC(year, 0, 4));\n    d.setUTCDate(d.getUTCDate() - (d.getUTCDay() + 6) % 7); // make it Monday of the week\n\n    return d;\n  }\n\n  function _setWeek(xdate, n, year, useUTC) {\n    var getField = curry(_getField, xdate, useUTC);\n    var setField = curry(_setField, xdate, useUTC);\n\n    if (year === undefined) {\n      year = getWeekYear(getField(FULLYEAR), getField(MONTH), getField(DATE));\n    }\n\n    var week1 = getWeek1(year);\n\n    if (!useUTC) {\n      week1 = coerceToLocal(week1);\n    }\n\n    xdate.setTime(week1.getTime());\n    setField(DATE, [getField(DATE) + (n - 1) * 7]); // would have used xdate.addUTCWeeks :(\n    // n-1 because n is 1-based\n  }\n  /* Parsing\n  ---------------------------------------------------------------------------------*/\n\n\n  XDate.parsers = [parseISO];\n\n  XDate.parse = function (str) {\n    return +XDate('' + str);\n  };\n\n  function parse(str, utcMode, xdate) {\n    var parsers = XDate.parsers;\n    var i = 0;\n    var res;\n\n    for (; i < parsers.length; i++) {\n      res = parsers[i](str, utcMode, xdate);\n\n      if (res) {\n        return res;\n      }\n    }\n\n    xdate[0] = new Date(str);\n    return xdate;\n  }\n\n  function parseISO(str, utcMode, xdate) {\n    var m = str.match(/^(\\d{4})(-(\\d{2})(-(\\d{2})([T ](\\d{2}):(\\d{2})(:(\\d{2})(\\.(\\d+))?)?(Z|(([-+])(\\d{2})(:?(\\d{2}))?))?)?)?)?$/);\n\n    if (m) {\n      var d = new Date(UTC(m[1], m[3] ? m[3] - 1 : 0, m[5] || 1, m[7] || 0, m[8] || 0, m[10] || 0, m[12] ? Number('0.' + m[12]) * 1000 : 0));\n\n      if (m[13]) {\n        // has gmt offset or Z\n        if (m[14]) {\n          // has gmt offset\n          d.setUTCMinutes(d.getUTCMinutes() + (m[15] == '-' ? 1 : -1) * (Number(m[16]) * 60 + (m[18] ? Number(m[18]) : 0)));\n        }\n      } else {\n        // no specified timezone\n        if (!utcMode) {\n          d = coerceToLocal(d);\n        }\n      }\n\n      return xdate.setTime(d.getTime());\n    }\n  }\n  /* Formatting\n  ---------------------------------------------------------------------------------*/\n\n\n  proto.toString = function (formatString, settings, uniqueness) {\n    if (formatString === undefined || !valid(this)) {\n      return this[0].toString(); // already accounts for utc-mode (might be toUTCString)\n    } else {\n      return format(this, formatString, settings, uniqueness, getUTCMode(this));\n    }\n  };\n\n  proto.toUTCString = proto.toGMTString = function (formatString, settings, uniqueness) {\n    if (formatString === undefined || !valid(this)) {\n      return this[0].toUTCString();\n    } else {\n      return format(this, formatString, settings, uniqueness, true);\n    }\n  };\n\n  proto.toISOString = function () {\n    return this.toUTCString(ISO_FORMAT_STRING_TZ);\n  };\n\n  XDate.defaultLocale = '';\n  XDate.locales = {\n    '': {\n      monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n      monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n      dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n      dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n      amDesignator: 'AM',\n      pmDesignator: 'PM'\n    }\n  };\n  XDate.formatters = {\n    i: ISO_FORMAT_STRING,\n    u: ISO_FORMAT_STRING_TZ\n  };\n\n  function format(xdate, formatString, settings, uniqueness, useUTC) {\n    var locales = XDate.locales;\n    var defaultLocaleSettings = locales[XDate.defaultLocale] || {};\n    var getField = curry(_getField, xdate, useUTC);\n    settings = (isString(settings) ? locales[settings] : settings) || {};\n\n    function getSetting(name) {\n      return settings[name] || defaultLocaleSettings[name];\n    }\n\n    function getFieldAndTrace(fieldIndex) {\n      if (uniqueness) {\n        var i = (fieldIndex == DAY ? DATE : fieldIndex) - 1;\n\n        for (; i >= 0; i--) {\n          uniqueness.push(getField(i));\n        }\n      }\n\n      return getField(fieldIndex);\n    }\n\n    return _format(xdate, formatString, getFieldAndTrace, getSetting, useUTC);\n  }\n\n  function _format(xdate, formatString, getField, getSetting, useUTC) {\n    var m;\n    var subout;\n    var out = '';\n\n    while (m = formatString.match(formatStringRE)) {\n      out += formatString.substr(0, m.index);\n\n      if (m[1]) {\n        // consecutive alphabetic characters\n        out += processTokenString(xdate, m[1], getField, getSetting, useUTC);\n      } else if (m[3]) {\n        // parenthesis\n        subout = _format(xdate, m[4], getField, getSetting, useUTC);\n\n        if (parseInt(subout.replace(/\\D/g, ''), 10)) {\n          // if any of the numbers are non-zero. or no numbers at all\n          out += subout;\n        }\n      } else {\n        // else if (m[6]) { // single quotes\n        out += m[7] || \"'\"; // if inner is blank, meaning 2 consecutive quotes = literal single quote\n      }\n\n      formatString = formatString.substr(m.index + m[0].length);\n    }\n\n    return out + formatString;\n  }\n\n  function processTokenString(xdate, tokenString, getField, getSetting, useUTC) {\n    var end = tokenString.length;\n    var replacement;\n    var out = '';\n\n    while (end > 0) {\n      replacement = getTokenReplacement(xdate, tokenString.substr(0, end), getField, getSetting, useUTC);\n\n      if (replacement !== undefined) {\n        out += replacement;\n        tokenString = tokenString.substr(end);\n        end = tokenString.length;\n      } else {\n        end--;\n      }\n    }\n\n    return out + tokenString;\n  }\n\n  function getTokenReplacement(xdate, token, getField, getSetting, useUTC) {\n    var formatter = XDate.formatters[token];\n\n    if (isString(formatter)) {\n      return _format(xdate, formatter, getField, getSetting, useUTC);\n    } else if (isFunction(formatter)) {\n      return formatter(xdate, useUTC || false, getSetting);\n    }\n\n    switch (token) {\n      case 'fff':\n        return zeroPad(getField(MILLISECONDS), 3);\n\n      case 's':\n        return getField(SECONDS);\n\n      case 'ss':\n        return zeroPad(getField(SECONDS));\n\n      case 'm':\n        return getField(MINUTES);\n\n      case 'mm':\n        return zeroPad(getField(MINUTES));\n\n      case 'h':\n        return getField(HOURS) % 12 || 12;\n\n      case 'hh':\n        return zeroPad(getField(HOURS) % 12 || 12);\n\n      case 'H':\n        return getField(HOURS);\n\n      case 'HH':\n        return zeroPad(getField(HOURS));\n\n      case 'd':\n        return getField(DATE);\n\n      case 'dd':\n        return zeroPad(getField(DATE));\n\n      case 'ddd':\n        return getSetting('dayNamesShort')[getField(DAY)] || '';\n\n      case 'dddd':\n        return getSetting('dayNames')[getField(DAY)] || '';\n\n      case 'M':\n        return getField(MONTH) + 1;\n\n      case 'MM':\n        return zeroPad(getField(MONTH) + 1);\n\n      case 'MMM':\n        return getSetting('monthNamesShort')[getField(MONTH)] || '';\n\n      case 'MMMM':\n        return getSetting('monthNames')[getField(MONTH)] || '';\n\n      case 'yy':\n        return (getField(FULLYEAR) + '').substring(2);\n\n      case 'yyyy':\n        return getField(FULLYEAR);\n\n      case 't':\n        return _getDesignator(getField, getSetting).substr(0, 1).toLowerCase();\n\n      case 'tt':\n        return _getDesignator(getField, getSetting).toLowerCase();\n\n      case 'T':\n        return _getDesignator(getField, getSetting).substr(0, 1);\n\n      case 'TT':\n        return _getDesignator(getField, getSetting);\n\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return useUTC ? 'Z' : _getTZString(xdate, token);\n\n      case 'w':\n        return _getWeek(getField);\n\n      case 'ww':\n        return zeroPad(_getWeek(getField));\n\n      case 'S':\n        var d = getField(DATE);\n        if (d > 10 && d < 20) return 'th';\n        return ['st', 'nd', 'rd'][d % 10 - 1] || 'th';\n    }\n  }\n\n  function _getTZString(xdate, token) {\n    var tzo = xdate.getTimezoneOffset();\n    var sign = tzo < 0 ? '+' : '-';\n    var hours = Math.floor(Math.abs(tzo) / 60);\n    var minutes = Math.abs(tzo) % 60;\n    var out = hours;\n\n    if (token == 'zz') {\n      out = zeroPad(hours);\n    } else if (token == 'zzz') {\n      out = zeroPad(hours) + ':' + zeroPad(minutes);\n    }\n\n    return sign + out;\n  }\n\n  function _getDesignator(getField, getSetting) {\n    return getField(HOURS) < 12 ? getSetting('amDesignator') : getSetting('pmDesignator');\n  }\n  /* Misc Methods\n  ---------------------------------------------------------------------------------*/\n\n\n  each([// other getters\n  'getTime', 'valueOf', 'toDateString', 'toTimeString', 'toLocaleString', 'toLocaleDateString', 'toLocaleTimeString', 'toJSON'], function (methodName) {\n    proto[methodName] = function () {\n      return this[0][methodName]();\n    };\n  });\n\n  proto.setTime = function (t) {\n    this[0].setTime(t);\n    return this; // for chaining\n  };\n\n  proto.valid = methodize(valid);\n\n  function valid(xdate) {\n    return !isNaN(xdate[0].getTime());\n  }\n\n  proto.clone = function () {\n    return new XDate(this);\n  };\n\n  proto.clearTime = function () {\n    return this.setHours(0, 0, 0, 0); // will return an XDate for chaining\n  };\n\n  proto.toDate = function () {\n    return new Date(this[0].getTime());\n  };\n  /* Misc Class Methods\n  ---------------------------------------------------------------------------------*/\n\n\n  XDate.now = function () {\n    return new Date().getTime();\n  };\n\n  XDate.today = function () {\n    return new XDate().clearTime();\n  };\n\n  XDate.UTC = UTC;\n  XDate.getDaysInMonth = getDaysInMonth;\n  /* Internal Utilities\n  ---------------------------------------------------------------------------------*/\n\n  function _clone(xdate) {\n    // returns the internal Date object that should be used\n    var d = new Date(xdate[0].getTime());\n\n    if (getUTCMode(xdate)) {\n      d.toString = toUTCString;\n    }\n\n    return d;\n  }\n\n  function _getField(d, useUTC, fieldIndex) {\n    return d['get' + (useUTC ? 'UTC' : '') + methodSubjects[fieldIndex]]();\n  }\n\n  function _setField(d, useUTC, fieldIndex, args) {\n    d['set' + (useUTC ? 'UTC' : '') + methodSubjects[fieldIndex]].apply(d, args);\n  }\n  /* Date Math Utilities\n  ---------------------------------------------------------------------------------*/\n\n\n  function coerceToUTC(date) {\n    return new Date(UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  }\n\n  function coerceToLocal(date) {\n    return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n  }\n\n  function getDaysInMonth(year, month) {\n    return 32 - new Date(UTC(year, month, 32)).getUTCDate();\n  }\n  /* General Utilities\n  ---------------------------------------------------------------------------------*/\n\n\n  function methodize(f) {\n    return function () {\n      return f.apply(undefined, [this].concat(slice(arguments)));\n    };\n  }\n\n  function curry(f) {\n    var firstArgs = slice(arguments, 1);\n    return function () {\n      return f.apply(undefined, firstArgs.concat(slice(arguments)));\n    };\n  }\n\n  function slice(a, start, end) {\n    return Array.prototype.slice.call(a, start || 0, // start and end cannot be undefined for IE\n    end === undefined ? a.length : end);\n  }\n\n  function each(a, f) {\n    for (var i = 0; i < a.length; i++) {\n      f(a[i], i);\n    }\n\n    ;\n  }\n\n  function isString(arg) {\n    return typeof arg == 'string';\n  }\n\n  function isNumber(arg) {\n    return typeof arg == 'number';\n  }\n\n  function isBoolean(arg) {\n    return typeof arg == 'boolean';\n  }\n\n  function isFunction(arg) {\n    return typeof arg == 'function';\n  }\n\n  function zeroPad(n, len) {\n    len = len || 2;\n    n += '';\n\n    while (n.length < len) {\n      n = '0' + n;\n    }\n\n    return n;\n  } // Export for Node.js\n\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = XDate;\n  } // AMD\n\n\n  if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return XDate;\n    });\n  }\n\n  return XDate;\n}(Date, Math, Array);","map":{"version":3,"sources":["/Users/rogetgeoffroy/Desktop/Folders/react_js_folder/react-live-search-app/live-search/node_modules/xdate/src/xdate.js"],"names":["XDate","Date","Math","Array","undefined","FULLYEAR","MONTH","DATE","HOURS","MINUTES","SECONDS","MILLISECONDS","DAY","YEAR","WEEK","DAY_MS","ISO_FORMAT_STRING","ISO_FORMAT_STRING_TZ","methodSubjects","subjectPlurals","unitsWithin","formatStringRE","RegExp","UTC","toUTCString","prototype","proto","length","splice","init","arguments","xdate","args","len","utcMode","isBoolean","slice","arg","getTime","isNumber","_clone","isString","parse","apply","coerceToLocal","setUTCMode","getUTCMode","methodize","toString","doCoercion","coerceToUTC","getTimezoneOffset","each","subject","fieldIndex","_getField","value","_set","delta","preventOverflow","_add","otherDate","_diff","useUTC","getField","curry","setField","_setField","expectedMonth","getDaysInMonth","Number","intDelta","floor","xdate1","xdate2","clone","v","i","methodName","getFullYear","clear1","toDate","setUTCHours","clear2","round","getWeek","_getWeek","getUTCWeek","setWeek","n","year","_setWeek","setUTCWeek","addWeeks","addDays","diffWeeks","month","date","d","week1","getWeek1","getWeekYear","setUTCDate","getUTCDate","getUTCDay","setTime","parsers","parseISO","str","res","m","match","setUTCMinutes","getUTCMinutes","formatString","settings","uniqueness","valid","format","toGMTString","toISOString","defaultLocale","locales","monthNames","monthNamesShort","dayNames","dayNamesShort","amDesignator","pmDesignator","formatters","u","defaultLocaleSettings","getSetting","name","getFieldAndTrace","push","_format","subout","out","substr","index","processTokenString","parseInt","replace","tokenString","end","replacement","getTokenReplacement","token","formatter","isFunction","zeroPad","substring","_getDesignator","toLowerCase","_getTZString","tzo","sign","hours","abs","minutes","t","isNaN","clearTime","setHours","now","today","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","getUTCFullYear","getUTCMonth","getUTCHours","getUTCSeconds","getUTCMilliseconds","f","concat","firstArgs","a","start","call","module","exports","define","amd"],"mappings":"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","sourcesContent":["/**\n * @preserve XDate v@VERSION\n * Docs & Licensing: http://arshaw.com/xdate/\n */\n\n/*\n * Internal Architecture\n * ---------------------\n * An XDate wraps a native Date. The native Date is stored in the '0' property of the object.\n * UTC-mode is determined by whether the internal native Date's toString method is set to\n * Date.prototype.toUTCString (see getUTCMode).\n *\n */\n\nvar XDate = (function(Date, Math, Array, undefined) {\n\n\n/** @const */ var FULLYEAR     = 0;\n/** @const */ var MONTH        = 1;\n/** @const */ var DATE         = 2;\n/** @const */ var HOURS        = 3;\n/** @const */ var MINUTES      = 4;\n/** @const */ var SECONDS      = 5;\n/** @const */ var MILLISECONDS = 6;\n/** @const */ var DAY          = 7;\n/** @const */ var YEAR         = 8;\n/** @const */ var WEEK         = 9;\n/** @const */ var DAY_MS = 86400000;\nvar ISO_FORMAT_STRING = \"yyyy-MM-dd'T'HH:mm:ss(.fff)\";\nvar ISO_FORMAT_STRING_TZ = ISO_FORMAT_STRING + \"zzz\";\n\n\nvar methodSubjects = [\n\t'FullYear',     // 0\n\t'Month',        // 1\n\t'Date',         // 2\n\t'Hours',        // 3\n\t'Minutes',      // 4\n\t'Seconds',      // 5\n\t'Milliseconds', // 6\n\t'Day',          // 7\n\t'Year'          // 8\n];\nvar subjectPlurals = [\n\t'Years',        // 0\n\t'Months',       // 1\n\t'Days'          // 2\n];\nvar unitsWithin = [\n\t12,   // months in year\n\t31,   // days in month (sort of)\n\t24,   // hours in day\n\t60,   // minutes in hour\n\t60,   // seconds in minute\n\t1000, // milliseconds in second\n\t1     //\n];\nvar formatStringRE = new RegExp(\n\t\"(([a-zA-Z])\\\\2*)|\" + // 1, 2\n\t\"(\\\\(\" + \"(('.*?'|\\\\(.*?\\\\)|.)*?)\" + \"\\\\))|\" + // 3, 4, 5 (allows for 1 level of inner quotes or parens)\n\t\"('(.*?)')\" // 6, 7\n);\nvar UTC = Date.UTC;\nvar toUTCString = Date.prototype.toUTCString;\nvar proto = XDate.prototype;\n\n\n\n// This makes an XDate look pretty in Firebug and Web Inspector.\n// It makes an XDate seem array-like, and displays [ <internal-date>.toString() ]\nproto.length = 1;\nproto.splice = Array.prototype.splice;\n\n\n\n\n/* Constructor\n---------------------------------------------------------------------------------*/\n\n// TODO: in future, I'd change signature for the constructor regarding the `true` utc-mode param. ~ashaw\n//   I'd move the boolean to be the *first* argument. Still optional. Seems cleaner.\n//   I'd remove it from the `xdate`, `nativeDate`, and `milliseconds` constructors.\n//      (because you can simply call .setUTCMode(true) after)\n//   And I'd only leave it for the y/m/d/h/m/s/m and `dateString` constructors\n//      (because those are the only constructors that need it for DST-gap data-loss reasons)\n//   Should do this for 1.0\n\nfunction XDate() {\n\treturn init(\n\t\t(this instanceof XDate) ? this : new XDate(),\n\t\targuments\n\t);\n}\n\n\nfunction init(xdate, args) {\n\tvar len = args.length;\n\tvar utcMode;\n\tif (isBoolean(args[len-1])) {\n\t\tutcMode = args[--len];\n\t\targs = slice(args, 0, len);\n\t}\n\tif (!len) {\n\t\txdate[0] = new Date();\n\t}\n\telse if (len == 1) {\n\t\tvar arg = args[0];\n\t\tif (arg instanceof Date) {\n\t\t\txdate[0] = new Date(arg.getTime());\n\t\t}\n\t\telse if (isNumber(arg)) {\n\t\t\txdate[0] = new Date(arg);\n\t\t}\n\t\telse if (arg instanceof XDate) {\n\t\t\txdate[0] = _clone(arg);\n\t\t}\n\t\telse if (isString(arg)) {\n\t\t\txdate[0] = new Date(0);\n\t\t\txdate = parse(arg, utcMode || false, xdate);\n\t\t}\n\t}\n\telse {\n\t\txdate[0] = new Date(UTC.apply(Date, args));\n\t\tif (!utcMode) {\n\t\t\txdate[0] = coerceToLocal(xdate[0]);\n\t\t}\n\t}\n\tif (isBoolean(utcMode)) {\n\t\tsetUTCMode(xdate, utcMode);\n\t}\n\treturn xdate;\n}\n\n\n\n/* UTC Mode Methods\n---------------------------------------------------------------------------------*/\n\n\nproto.getUTCMode = methodize(getUTCMode);\nfunction getUTCMode(xdate) {\n\treturn xdate[0].toString === toUTCString;\n};\n\n\nproto.setUTCMode = methodize(setUTCMode);\nfunction setUTCMode(xdate, utcMode, doCoercion) {\n\tif (utcMode) {\n\t\tif (!getUTCMode(xdate)) {\n\t\t\tif (doCoercion) {\n\t\t\t\txdate[0] = coerceToUTC(xdate[0]);\n\t\t\t}\n\t\t\txdate[0].toString = toUTCString;\n\t\t}\n\t}else{\n\t\tif (getUTCMode(xdate)) {\n\t\t\tif (doCoercion) {\n\t\t\t\txdate[0] = coerceToLocal(xdate[0]);\n\t\t\t}else{\n\t\t\t\txdate[0] = new Date(xdate[0].getTime());\n\t\t\t}\n\t\t\t// toString will have been cleared\n\t\t}\n\t}\n\treturn xdate; // for chaining\n}\n\n\nproto.getTimezoneOffset = function() {\n\tif (getUTCMode(this)) {\n\t\treturn 0;\n\t}else{\n\t\treturn this[0].getTimezoneOffset();\n\t}\n};\n\n\n\n/* get / set / add / diff Methods (except for week-related)\n---------------------------------------------------------------------------------*/\n\n\neach(methodSubjects, function(subject, fieldIndex) {\n\n\tproto['get' + subject] = function() {\n\t\treturn _getField(this[0], getUTCMode(this), fieldIndex);\n\t};\n\n\tif (fieldIndex != YEAR) { // because there is no getUTCYear\n\n\t\tproto['getUTC' + subject] = function() {\n\t\t\treturn _getField(this[0], true, fieldIndex);\n\t\t};\n\n\t}\n\n\tif (fieldIndex != DAY) { // because there is no setDay or setUTCDay\n\t                         // and the add* and diff* methods use DATE instead\n\n\t\tproto['set' + subject] = function(value) {\n\t\t\t_set(this, fieldIndex, value, arguments, getUTCMode(this));\n\t\t\treturn this; // for chaining\n\t\t};\n\n\t\tif (fieldIndex != YEAR) { // because there is no setUTCYear\n\t\t                          // and the add* and diff* methods use FULLYEAR instead\n\n\t\t\tproto['setUTC' + subject] = function(value) {\n\t\t\t\t_set(this, fieldIndex, value, arguments, true);\n\t\t\t\treturn this; // for chaining\n\t\t\t};\n\n\t\t\tproto['add' + (subjectPlurals[fieldIndex] || subject)] = function(delta, preventOverflow) {\n\t\t\t\t_add(this, fieldIndex, delta, preventOverflow);\n\t\t\t\treturn this; // for chaining\n\t\t\t};\n\n\t\t\tproto['diff' + (subjectPlurals[fieldIndex] || subject)] = function(otherDate) {\n\t\t\t\treturn _diff(this, otherDate, fieldIndex);\n\t\t\t};\n\n\t\t}\n\n\t}\n\n});\n\n\nfunction _set(xdate, fieldIndex, value, args, useUTC) {\n\tvar getField = curry(_getField, xdate[0], useUTC);\n\tvar setField = curry(_setField, xdate[0], useUTC);\n\tvar expectedMonth;\n\tvar preventOverflow = false;\n\tif (args.length == 2 && isBoolean(args[1])) {\n\t\tpreventOverflow = args[1];\n\t\targs = [ value ];\n\t}\n\tif (fieldIndex == MONTH) {\n\t\texpectedMonth = (value % 12 + 12) % 12;\n\t}else{\n\t\texpectedMonth = getField(MONTH);\n\t}\n\tsetField(fieldIndex, args);\n\tif (preventOverflow && getField(MONTH) != expectedMonth) {\n\t\tsetField(MONTH, [ getField(MONTH) - 1 ]);\n\t\tsetField(DATE, [ getDaysInMonth(getField(FULLYEAR), getField(MONTH)) ]);\n\t}\n}\n\n\nfunction _add(xdate, fieldIndex, delta, preventOverflow) {\n\tdelta = Number(delta);\n\tvar intDelta = Math.floor(delta);\n\txdate['set' + methodSubjects[fieldIndex]](\n\t\txdate['get' + methodSubjects[fieldIndex]]() + intDelta,\n\t\tpreventOverflow || false\n\t);\n\tif (intDelta != delta && fieldIndex < MILLISECONDS) {\n\t\t_add(xdate, fieldIndex+1, (delta-intDelta)*unitsWithin[fieldIndex], preventOverflow);\n\t}\n}\n\n\nfunction _diff(xdate1, xdate2, fieldIndex) { // fieldIndex=FULLYEAR is for years, fieldIndex=DATE is for days\n\txdate1 = xdate1.clone().setUTCMode(true, true);\n\txdate2 = XDate(xdate2).setUTCMode(true, true);\n\tvar v = 0;\n\tif (fieldIndex == FULLYEAR || fieldIndex == MONTH) {\n\t\tfor (var i=MILLISECONDS, methodName; i>=fieldIndex; i--) {\n\t\t\tv /= unitsWithin[i];\n\t\t\tv += _getField(xdate2, false, i) - _getField(xdate1, false, i);\n\t\t}\n\t\tif (fieldIndex == MONTH) {\n\t\t\tv += (xdate2.getFullYear() - xdate1.getFullYear()) * 12;\n\t\t}\n\t}\n\telse if (fieldIndex == DATE) {\n\t\tvar clear1 = xdate1.toDate().setUTCHours(0, 0, 0, 0); // returns an ms value\n\t\tvar clear2 = xdate2.toDate().setUTCHours(0, 0, 0, 0); // returns an ms value\n\t\tv = Math.round((clear2 - clear1) / DAY_MS) + ((xdate2 - clear2) - (xdate1 - clear1)) / DAY_MS;\n\t}\n\telse {\n\t\tv = (xdate2 - xdate1) / [\n\t\t\t3600000, // milliseconds in hour\n\t\t\t60000,   // milliseconds in minute\n\t\t\t1000,    // milliseconds in second\n\t\t\t1        //\n\t\t\t][fieldIndex - 3];\n\t}\n\treturn v;\n}\n\n\n\n/* Week Methods\n---------------------------------------------------------------------------------*/\n\n\nproto.getWeek = function() {\n\treturn _getWeek(curry(_getField, this, false));\n};\n\n\nproto.getUTCWeek = function() {\n\treturn _getWeek(curry(_getField, this, true));\n};\n\n\nproto.setWeek = function(n, year) {\n\t_setWeek(this, n, year, false);\n\treturn this; // for chaining\n};\n\n\nproto.setUTCWeek = function(n, year) {\n\t_setWeek(this, n, year, true);\n\treturn this; // for chaining\n};\n\n\nproto.addWeeks = function(delta) {\n\treturn this.addDays(Number(delta) * 7);\n};\n\n\nproto.diffWeeks = function(otherDate) {\n\treturn _diff(this, otherDate, DATE) / 7;\n};\n\n\nfunction _getWeek(getField) {\n\treturn getWeek(getField(FULLYEAR), getField(MONTH), getField(DATE));\n}\n\n\nfunction getWeek(year, month, date) {\n\tvar d = new Date(UTC(year, month, date));\n\tvar week1 = getWeek1(\n\t\tgetWeekYear(year, month, date)\n\t);\n\treturn Math.floor(Math.round((d - week1) / DAY_MS) / 7) + 1;\n}\n\n\nfunction getWeekYear(year, month, date) { // get the year that the date's week # belongs to\n\tvar d = new Date(UTC(year, month, date));\n\tif (d < getWeek1(year)) {\n\t\treturn year - 1;\n\t}\n\telse if (d >= getWeek1(year + 1)) {\n\t\treturn year + 1;\n\t}\n\treturn year;\n}\n\n\nfunction getWeek1(year) { // returns Date of first week of year, in UTC\n\tvar d = new Date(UTC(year, 0, 4));\n\td.setUTCDate(d.getUTCDate() - (d.getUTCDay() + 6) % 7); // make it Monday of the week\n\treturn d;\n}\n\n\nfunction _setWeek(xdate, n, year, useUTC) {\n\tvar getField = curry(_getField, xdate, useUTC);\n\tvar setField = curry(_setField, xdate, useUTC);\n\n\tif (year === undefined) {\n\t\tyear = getWeekYear(\n\t\t\tgetField(FULLYEAR),\n\t\t\tgetField(MONTH),\n\t\t\tgetField(DATE)\n\t\t);\n\t}\n\n\tvar week1 = getWeek1(year);\n\tif (!useUTC) {\n\t\tweek1 = coerceToLocal(week1);\n\t}\n\n\txdate.setTime(week1.getTime());\n\tsetField(DATE, [ getField(DATE) + (n-1) * 7 ]); // would have used xdate.addUTCWeeks :(\n\t\t// n-1 because n is 1-based\n}\n\n\n\n/* Parsing\n---------------------------------------------------------------------------------*/\n\n\nXDate.parsers = [\n\tparseISO\n];\n\n\nXDate.parse = function(str) {\n\treturn +XDate(''+str);\n};\n\n\nfunction parse(str, utcMode, xdate) {\n\tvar parsers = XDate.parsers;\n\tvar i = 0;\n\tvar res;\n\tfor (; i<parsers.length; i++) {\n\t\tres = parsers[i](str, utcMode, xdate);\n\t\tif (res) {\n\t\t\treturn res;\n\t\t}\n\t}\n\txdate[0] = new Date(str);\n\treturn xdate;\n}\n\n\nfunction parseISO(str, utcMode, xdate) {\n\tvar m = str.match(/^(\\d{4})(-(\\d{2})(-(\\d{2})([T ](\\d{2}):(\\d{2})(:(\\d{2})(\\.(\\d+))?)?(Z|(([-+])(\\d{2})(:?(\\d{2}))?))?)?)?)?$/);\n\tif (m) {\n\t\tvar d = new Date(UTC(\n\t\t\tm[1],\n\t\t\tm[3] ? m[3] - 1 : 0,\n\t\t\tm[5] || 1,\n\t\t\tm[7] || 0,\n\t\t\tm[8] || 0,\n\t\t\tm[10] || 0,\n\t\t\tm[12] ? Number('0.' + m[12]) * 1000 : 0\n\t\t));\n\t\tif (m[13]) { // has gmt offset or Z\n\t\t\tif (m[14]) { // has gmt offset\n\t\t\t\td.setUTCMinutes(\n\t\t\t\t\td.getUTCMinutes() +\n\t\t\t\t\t(m[15] == '-' ? 1 : -1) * (Number(m[16]) * 60 + (m[18] ? Number(m[18]) : 0))\n\t\t\t\t);\n\t\t\t}\n\t\t}else{ // no specified timezone\n\t\t\tif (!utcMode) {\n\t\t\t\td = coerceToLocal(d);\n\t\t\t}\n\t\t}\n\t\treturn xdate.setTime(d.getTime());\n\t}\n}\n\n\n\n/* Formatting\n---------------------------------------------------------------------------------*/\n\n\nproto.toString = function(formatString, settings, uniqueness) {\n\tif (formatString === undefined || !valid(this)) {\n\t\treturn this[0].toString(); // already accounts for utc-mode (might be toUTCString)\n\t}else{\n\t\treturn format(this, formatString, settings, uniqueness, getUTCMode(this));\n\t}\n};\n\n\nproto.toUTCString = proto.toGMTString = function(formatString, settings, uniqueness) {\n\tif (formatString === undefined || !valid(this)) {\n\t\treturn this[0].toUTCString();\n\t}else{\n\t\treturn format(this, formatString, settings, uniqueness, true);\n\t}\n};\n\n\nproto.toISOString = function() {\n\treturn this.toUTCString(ISO_FORMAT_STRING_TZ);\n};\n\n\nXDate.defaultLocale = '';\nXDate.locales = {\n\t'': {\n\t\tmonthNames: ['January','February','March','April','May','June','July','August','September','October','November','December'],\n\t\tmonthNamesShort: ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'],\n\t\tdayNames: ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],\n\t\tdayNamesShort: ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'],\n\t\tamDesignator: 'AM',\n\t\tpmDesignator: 'PM'\n\t}\n};\nXDate.formatters = {\n\ti: ISO_FORMAT_STRING,\n\tu: ISO_FORMAT_STRING_TZ\n};\n\n\nfunction format(xdate, formatString, settings, uniqueness, useUTC) {\n\n\tvar locales = XDate.locales;\n\tvar defaultLocaleSettings = locales[XDate.defaultLocale] || {};\n\tvar getField = curry(_getField, xdate, useUTC);\n\n\tsettings = (isString(settings) ? locales[settings] : settings) || {};\n\n\tfunction getSetting(name) {\n\t\treturn settings[name] || defaultLocaleSettings[name];\n\t}\n\n\tfunction getFieldAndTrace(fieldIndex) {\n\t\tif (uniqueness) {\n\t\t\tvar i = (fieldIndex == DAY ? DATE : fieldIndex) - 1;\n\t\t\tfor (; i>=0; i--) {\n\t\t\t\tuniqueness.push(getField(i));\n\t\t\t}\n\t\t}\n\t\treturn getField(fieldIndex);\n\t}\n\n\treturn _format(xdate, formatString, getFieldAndTrace, getSetting, useUTC);\n}\n\n\nfunction _format(xdate, formatString, getField, getSetting, useUTC) {\n\tvar m;\n\tvar subout;\n\tvar out = '';\n\twhile (m = formatString.match(formatStringRE)) {\n\t\tout += formatString.substr(0, m.index);\n\t\tif (m[1]) { // consecutive alphabetic characters\n\t\t\tout += processTokenString(xdate, m[1], getField, getSetting, useUTC);\n\t\t}\n\t\telse if (m[3]) { // parenthesis\n\t\t\tsubout = _format(xdate, m[4], getField, getSetting, useUTC);\n\t\t\tif (parseInt(subout.replace(/\\D/g, ''), 10)) { // if any of the numbers are non-zero. or no numbers at all\n\t\t\t\tout += subout;\n\t\t\t}\n\t\t}\n\t\telse { // else if (m[6]) { // single quotes\n\t\t\tout += m[7] || \"'\"; // if inner is blank, meaning 2 consecutive quotes = literal single quote\n\t\t}\n\t\tformatString = formatString.substr(m.index + m[0].length);\n\t}\n\treturn out + formatString;\n}\n\n\nfunction processTokenString(xdate, tokenString, getField, getSetting, useUTC) {\n\tvar end = tokenString.length;\n\tvar replacement;\n\tvar out = '';\n\twhile (end > 0) {\n\t\treplacement = getTokenReplacement(xdate, tokenString.substr(0, end), getField, getSetting, useUTC);\n\t\tif (replacement !== undefined) {\n\t\t\tout += replacement;\n\t\t\ttokenString = tokenString.substr(end);\n\t\t\tend = tokenString.length;\n\t\t}else{\n\t\t\tend--;\n\t\t}\n\t}\n\treturn out + tokenString;\n}\n\n\nfunction getTokenReplacement(xdate, token, getField, getSetting, useUTC) {\n\tvar formatter = XDate.formatters[token];\n\tif (isString(formatter)) {\n\t\treturn _format(xdate, formatter, getField, getSetting, useUTC);\n\t}\n\telse if (isFunction(formatter)) {\n\t\treturn formatter(xdate, useUTC || false, getSetting);\n\t}\n\tswitch (token) {\n\t\tcase 'fff'  : return zeroPad(getField(MILLISECONDS), 3);\n\t\tcase 's'    : return getField(SECONDS);\n\t\tcase 'ss'   : return zeroPad(getField(SECONDS));\n\t\tcase 'm'    : return getField(MINUTES);\n\t\tcase 'mm'   : return zeroPad(getField(MINUTES));\n\t\tcase 'h'    : return getField(HOURS) % 12 || 12;\n\t\tcase 'hh'   : return zeroPad(getField(HOURS) % 12 || 12);\n\t\tcase 'H'    : return getField(HOURS);\n\t\tcase 'HH'   : return zeroPad(getField(HOURS));\n\t\tcase 'd'    : return getField(DATE);\n\t\tcase 'dd'   : return zeroPad(getField(DATE));\n\t\tcase 'ddd'  : return getSetting('dayNamesShort')[getField(DAY)] || '';\n\t\tcase 'dddd' : return getSetting('dayNames')[getField(DAY)] || '';\n\t\tcase 'M'    : return getField(MONTH) + 1;\n\t\tcase 'MM'   : return zeroPad(getField(MONTH) + 1);\n\t\tcase 'MMM'  : return getSetting('monthNamesShort')[getField(MONTH)] || '';\n\t\tcase 'MMMM' : return getSetting('monthNames')[getField(MONTH)] || '';\n\t\tcase 'yy'   : return (getField(FULLYEAR)+'').substring(2);\n\t\tcase 'yyyy' : return getField(FULLYEAR);\n\t\tcase 't'    : return _getDesignator(getField, getSetting).substr(0, 1).toLowerCase();\n\t\tcase 'tt'   : return _getDesignator(getField, getSetting).toLowerCase();\n\t\tcase 'T'    : return _getDesignator(getField, getSetting).substr(0, 1);\n\t\tcase 'TT'   : return _getDesignator(getField, getSetting);\n\t\tcase 'z'    :\n\t\tcase 'zz'   :\n\t\tcase 'zzz'  : return useUTC ? 'Z' : _getTZString(xdate, token);\n\t\tcase 'w'    : return _getWeek(getField);\n\t\tcase 'ww'   : return zeroPad(_getWeek(getField));\n\t\tcase 'S'    :\n\t\t\tvar d = getField(DATE);\n\t\t\tif (d > 10 && d < 20) return 'th';\n\t\t\treturn ['st', 'nd', 'rd'][d % 10 - 1] || 'th';\n\t}\n}\n\n\nfunction _getTZString(xdate, token) {\n\tvar tzo = xdate.getTimezoneOffset();\n\tvar sign = tzo < 0 ? '+' : '-';\n\tvar hours = Math.floor(Math.abs(tzo) / 60);\n\tvar minutes = Math.abs(tzo) % 60;\n\tvar out = hours;\n\tif (token == 'zz') {\n\t\tout = zeroPad(hours);\n\t}\n\telse if (token == 'zzz') {\n\t\tout = zeroPad(hours) + ':' + zeroPad(minutes);\n\t}\n\treturn sign + out;\n}\n\n\nfunction _getDesignator(getField, getSetting) {\n\treturn getField(HOURS) < 12 ? getSetting('amDesignator') : getSetting('pmDesignator');\n}\n\n\n\n/* Misc Methods\n---------------------------------------------------------------------------------*/\n\n\neach(\n\t[ // other getters\n\t\t'getTime',\n\t\t'valueOf',\n\t\t'toDateString',\n\t\t'toTimeString',\n\t\t'toLocaleString',\n\t\t'toLocaleDateString',\n\t\t'toLocaleTimeString',\n\t\t'toJSON'\n\t],\n\tfunction(methodName) {\n\t\tproto[methodName] = function() {\n\t\t\treturn this[0][methodName]();\n\t\t};\n\t}\n);\n\n\nproto.setTime = function(t) {\n\tthis[0].setTime(t);\n\treturn this; // for chaining\n};\n\n\nproto.valid = methodize(valid);\nfunction valid(xdate) {\n\treturn !isNaN(xdate[0].getTime());\n}\n\n\nproto.clone = function() {\n\treturn new XDate(this);\n};\n\n\nproto.clearTime = function() {\n\treturn this.setHours(0, 0, 0, 0); // will return an XDate for chaining\n};\n\n\nproto.toDate = function() {\n\treturn new Date(this[0].getTime());\n};\n\n\n\n/* Misc Class Methods\n---------------------------------------------------------------------------------*/\n\n\nXDate.now = function() {\n\treturn (new Date()).getTime();\n};\n\n\nXDate.today = function() {\n\treturn new XDate().clearTime();\n};\n\n\nXDate.UTC = UTC;\n\n\nXDate.getDaysInMonth = getDaysInMonth;\n\n\n\n/* Internal Utilities\n---------------------------------------------------------------------------------*/\n\n\nfunction _clone(xdate) { // returns the internal Date object that should be used\n\tvar d = new Date(xdate[0].getTime());\n\tif (getUTCMode(xdate)) {\n\t\td.toString = toUTCString;\n\t}\n\treturn d;\n}\n\n\nfunction _getField(d, useUTC, fieldIndex) {\n\treturn d['get' + (useUTC ? 'UTC' : '') + methodSubjects[fieldIndex]]();\n}\n\n\nfunction _setField(d, useUTC, fieldIndex, args) {\n\td['set' + (useUTC ? 'UTC' : '') + methodSubjects[fieldIndex]].apply(d, args);\n}\n\n\n\n/* Date Math Utilities\n---------------------------------------------------------------------------------*/\n\n\nfunction coerceToUTC(date) {\n\treturn new Date(UTC(\n\t\tdate.getFullYear(),\n\t\tdate.getMonth(),\n\t\tdate.getDate(),\n\t\tdate.getHours(),\n\t\tdate.getMinutes(),\n\t\tdate.getSeconds(),\n\t\tdate.getMilliseconds()\n\t));\n}\n\n\nfunction coerceToLocal(date) {\n\treturn new Date(\n\t\tdate.getUTCFullYear(),\n\t\tdate.getUTCMonth(),\n\t\tdate.getUTCDate(),\n\t\tdate.getUTCHours(),\n\t\tdate.getUTCMinutes(),\n\t\tdate.getUTCSeconds(),\n\t\tdate.getUTCMilliseconds()\n\t);\n}\n\n\nfunction getDaysInMonth(year, month) {\n\treturn 32 - new Date(UTC(year, month, 32)).getUTCDate();\n}\n\n\n\n/* General Utilities\n---------------------------------------------------------------------------------*/\n\n\nfunction methodize(f) {\n\treturn function() {\n\t\treturn f.apply(undefined, [this].concat(slice(arguments)));\n\t};\n}\n\n\nfunction curry(f) {\n\tvar firstArgs = slice(arguments, 1);\n\treturn function() {\n\t\treturn f.apply(undefined, firstArgs.concat(slice(arguments)));\n\t};\n}\n\n\nfunction slice(a, start, end) {\n\treturn Array.prototype.slice.call(\n\t\ta,\n\t\tstart || 0, // start and end cannot be undefined for IE\n\t\tend===undefined ? a.length : end\n\t);\n}\n\n\nfunction each(a, f) {\n\tfor (var i=0; i<a.length; i++) {\n\t\tf(a[i], i);\n\t};\n}\n\n\nfunction isString(arg) {\n\treturn typeof arg == 'string';\n}\n\n\nfunction isNumber(arg) {\n\treturn typeof arg == 'number';\n}\n\n\nfunction isBoolean(arg) {\n\treturn typeof arg == 'boolean';\n}\n\n\nfunction isFunction(arg) {\n\treturn typeof arg == 'function';\n}\n\n\nfunction zeroPad(n, len) {\n\tlen = len || 2;\n\tn += '';\n\twhile (n.length < len) {\n\t\tn = '0' + n;\n\t}\n\treturn n;\n}\n\n\n\n// Export for Node.js\nif (typeof module !== 'undefined' && module.exports) {\n\tmodule.exports = XDate;\n}\n\n// AMD\nif (typeof define === 'function' && define.amd) {\n\tdefine([], function() {\n\t\treturn XDate;\n\t});\n}\n\n\nreturn XDate;\n\n})(Date, Math, Array);\n"]},"metadata":{},"sourceType":"script"}