import fetch from 'cross-fetch';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

// Function to parse the URL
function btoa(input) {
  if (input === void 0) {
    input = '';
  }

  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
  var str = input;
  var output = ''; // eslint-disable-next-line

  for (var block = 0, charCode, i = 0, map = chars; str.charAt(i | 0) || (map = '=', i % 1); // eslint-disable-line no-bitwise
  output += map.charAt(63 & block >> 8 - i % 1 * 8) // eslint-disable-line no-bitwise
  ) {
    charCode = str.charCodeAt(i += 3 / 4);

    if (charCode > 0xff) {
      throw new Error('"btoa" failed: The string to be encoded contains characters outside of the Latin1 range.');
    }

    block = block << 8 | charCode; // eslint-disable-line no-bitwise
  }

  return output;
}

function validateIndex(index) {
  if (!index) {
    throw new Error('appbase-analytics: A valid index must be present to record analytics events.');
  }
}
function validateCredentials(credentials) {
  if (!credentials) {
    throw new Error('appbase-analytics: Auth credentials is missing.');
  }
}
function validateURL(url) {
  if (!url) {
    throw new Error('appbase-analytics: URL is missing.');
  }
}
function validateQuery(query, queryID) {
  if ((query === undefined || query === null) && !queryID) {
    throw new Error('appbase-analytics: query or queryID must be present to register a click/conversion event');
  }
}
function validateClickObjects(objects) {
  if (!objects || Object.keys(objects).length < 1) {
    throw new Error('appbase-analytics: at least one click object must be present to register a click event');
  }
}
function validateConversionObjects(objects) {
  if (!objects || Object.keys(objects).length < 1) {
    throw new Error('appbase-analytics: at least one click object must be present to register a click event');
  }
}

function initClient(config) {
  if (config === void 0) {
    config = {};
  }

  var metrics = {
    credentials: config.credentials,
    index: config.index,
    url: config.url,
    userID: config.userID,
    globalEventData: config.globalEventData,
    queryID: '',
    headers: null
  };
  validateIndex(metrics.index);
  validateCredentials(metrics.credentials);
  validateURL(metrics.url);

  metrics._request = function (url, body, callback) {
    var finalBody = _extends({}, body, {
      user_id: metrics.userID,
      event_data: _extends({}, body && body.event_data, {}, metrics.globalEventData)
    });

    return fetch(metrics.url + "/" + metrics.index + "/_analytics/" + url, {
      method: 'PUT',
      headers: _extends({}, metrics.headers, {
        'Content-Type': 'application/json',
        Authorization: "Basic " + btoa(metrics.credentials)
      }),
      body: JSON.stringify(finalBody)
    }).then(function (response) {
      if (callback) {
        callback(null, response);
      }
    })["catch"](function (err) {
      console.error(err);

      if (callback) {
        callback(err, null);
      }
    });
  }; // To register a search


  metrics.search = function (searchConfig, callback) {
    validateQuery(searchConfig.query, searchConfig.queryID);

    var captureQueryID = function captureQueryID(err, res) {
      if (res) {
        res.json().then(function (response) {
          if (response && response.query_id) {
            metrics.queryID = response.query_id;
          }
        })["catch"](function (error) {
          console.error(error);
        });
      }

      if (callback) {
        callback(err, res);
      }
    }; // just to avoid the flow type error


    if (metrics._request) {
      var requestBody = {
        query: searchConfig.query,
        query_id: searchConfig.queryID,
        event_data: searchConfig.eventData,
        filters: searchConfig.filters,
        hits: searchConfig.hits
      };

      metrics._request('search', requestBody, captureQueryID);
    }
  }; // To register a click


  metrics.click = function (clickConfig, callback) {
    validateQuery(clickConfig.query, clickConfig.queryID);
    validateClickObjects(clickConfig.objects); // just to avoid the flow type error

    if (metrics._request) {
      var requestBody = {
        click_on: clickConfig.objects,
        click_type: clickConfig.isSuggestionClick ? 'suggestion' : 'result',
        query: clickConfig.query,
        query_id: clickConfig.queryID,
        event_data: clickConfig.eventData
      };

      metrics._request('click', requestBody, callback);
    }
  }; // To register a conversion


  metrics.conversion = function (conversionConfig, callback) {
    validateQuery(conversionConfig.query, conversionConfig.queryID);
    validateConversionObjects(conversionConfig.objects); // just to avoid the flow type error

    if (metrics._request) {
      var requestBody = {
        conversion_on: conversionConfig.objects,
        query: conversionConfig.query,
        query_id: conversionConfig.queryID,
        event_data: conversionConfig.eventData
      };

      metrics._request('conversion', requestBody, callback);
    }
  }; // Sets the userID


  metrics.setUserID = function (userID) {
    metrics.userID = userID;
  }; // Sets the global events


  metrics.setGlobalEventData = function (globalEvents) {
    metrics.globalEventData = globalEvents;
  }; // Sets the headers


  metrics.setHeaders = function (headers) {
    metrics.headers = headers;
  };

  return metrics;
}

var index = {
  init: initClient
};

export default index;
