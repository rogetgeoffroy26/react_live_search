{"version":3,"file":"searchbase.umd.min.js","sources":["../../../../node_modules/cross-fetch/dist/browser-ponyfill.js","../../node_modules/@appbaseio/analytics/dist/@appbaseio/analytics.es.js","../../src/utils.js","../../src/Results.js","../../src/observable.js","../../src/CompositeAggregationResults.js","../../src/index.js"],"sourcesContent":["var __self__ = (function (root) {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = root.DOMException\n}\nF.prototype = root;\nreturn new F();\n})(typeof self !== 'undefined' ? self : this);\n(function(self) {\n\nvar irrelevant = (function (exports) {\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  return exports;\n\n}({}));\n})(__self__);\ndelete __self__.fetch.polyfill\nexports = __self__.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = __self__.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = __self__.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = __self__.Headers\nexports.Request = __self__.Request\nexports.Response = __self__.Response\nmodule.exports = exports\n","import fetch from 'cross-fetch';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\n// Function to parse the URL\nfunction btoa(input) {\n  if (input === void 0) {\n    input = '';\n  }\n\n  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n  var str = input;\n  var output = ''; // eslint-disable-next-line\n\n  for (var block = 0, charCode, i = 0, map = chars; str.charAt(i | 0) || (map = '=', i % 1); // eslint-disable-line no-bitwise\n  output += map.charAt(63 & block >> 8 - i % 1 * 8) // eslint-disable-line no-bitwise\n  ) {\n    charCode = str.charCodeAt(i += 3 / 4);\n\n    if (charCode > 0xff) {\n      throw new Error('\"btoa\" failed: The string to be encoded contains characters outside of the Latin1 range.');\n    }\n\n    block = block << 8 | charCode; // eslint-disable-line no-bitwise\n  }\n\n  return output;\n}\n\nfunction validateIndex(index) {\n  if (!index) {\n    throw new Error('appbase-analytics: A valid index must be present to record analytics events.');\n  }\n}\nfunction validateCredentials(credentials) {\n  if (!credentials) {\n    throw new Error('appbase-analytics: Auth credentials is missing.');\n  }\n}\nfunction validateURL(url) {\n  if (!url) {\n    throw new Error('appbase-analytics: URL is missing.');\n  }\n}\nfunction validateQuery(query, queryID) {\n  if ((query === undefined || query === null) && !queryID) {\n    throw new Error('appbase-analytics: query or queryID must be present to register a click/conversion event');\n  }\n}\nfunction validateClickObjects(objects) {\n  if (!objects || Object.keys(objects).length < 1) {\n    throw new Error('appbase-analytics: at least one click object must be present to register a click event');\n  }\n}\nfunction validateConversionObjects(objects) {\n  if (!objects || Object.keys(objects).length < 1) {\n    throw new Error('appbase-analytics: at least one click object must be present to register a click event');\n  }\n}\n\nfunction initClient(config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  var metrics = {\n    credentials: config.credentials,\n    index: config.index,\n    url: config.url,\n    userID: config.userID,\n    globalEventData: config.globalEventData,\n    queryID: '',\n    headers: null\n  };\n  validateIndex(metrics.index);\n  validateCredentials(metrics.credentials);\n  validateURL(metrics.url);\n\n  metrics._request = function (url, body, callback) {\n    var finalBody = _extends({}, body, {\n      user_id: metrics.userID,\n      event_data: _extends({}, body && body.event_data, {}, metrics.globalEventData)\n    });\n\n    return fetch(metrics.url + \"/\" + metrics.index + \"/_analytics/\" + url, {\n      method: 'PUT',\n      headers: _extends({}, metrics.headers, {\n        'Content-Type': 'application/json',\n        Authorization: \"Basic \" + btoa(metrics.credentials)\n      }),\n      body: JSON.stringify(finalBody)\n    }).then(function (response) {\n      if (callback) {\n        callback(null, response);\n      }\n    })[\"catch\"](function (err) {\n      console.error(err);\n\n      if (callback) {\n        callback(err, null);\n      }\n    });\n  }; // To register a search\n\n\n  metrics.search = function (searchConfig, callback) {\n    validateQuery(searchConfig.query, searchConfig.queryID);\n\n    var captureQueryID = function captureQueryID(err, res) {\n      if (res) {\n        res.json().then(function (response) {\n          if (response && response.query_id) {\n            metrics.queryID = response.query_id;\n          }\n        })[\"catch\"](function (error) {\n          console.error(error);\n        });\n      }\n\n      if (callback) {\n        callback(err, res);\n      }\n    }; // just to avoid the flow type error\n\n\n    if (metrics._request) {\n      var requestBody = {\n        query: searchConfig.query,\n        query_id: searchConfig.queryID,\n        event_data: searchConfig.eventData,\n        filters: searchConfig.filters,\n        hits: searchConfig.hits\n      };\n\n      metrics._request('search', requestBody, captureQueryID);\n    }\n  }; // To register a click\n\n\n  metrics.click = function (clickConfig, callback) {\n    validateQuery(clickConfig.query, clickConfig.queryID);\n    validateClickObjects(clickConfig.objects); // just to avoid the flow type error\n\n    if (metrics._request) {\n      var requestBody = {\n        click_on: clickConfig.objects,\n        click_type: clickConfig.isSuggestionClick ? 'suggestion' : 'result',\n        query: clickConfig.query,\n        query_id: clickConfig.queryID,\n        event_data: clickConfig.eventData\n      };\n\n      metrics._request('click', requestBody, callback);\n    }\n  }; // To register a conversion\n\n\n  metrics.conversion = function (conversionConfig, callback) {\n    validateQuery(conversionConfig.query, conversionConfig.queryID);\n    validateConversionObjects(conversionConfig.objects); // just to avoid the flow type error\n\n    if (metrics._request) {\n      var requestBody = {\n        conversion_on: conversionConfig.objects,\n        query: conversionConfig.query,\n        query_id: conversionConfig.queryID,\n        event_data: conversionConfig.eventData\n      };\n\n      metrics._request('conversion', requestBody, callback);\n    }\n  }; // Sets the userID\n\n\n  metrics.setUserID = function (userID) {\n    metrics.userID = userID;\n  }; // Sets the global events\n\n\n  metrics.setGlobalEventData = function (globalEvents) {\n    metrics.globalEventData = globalEvents;\n  }; // Sets the headers\n\n\n  metrics.setHeaders = function (headers) {\n    metrics.headers = headers;\n  };\n\n  return metrics;\n}\n\nvar index = {\n  init: initClient\n};\n\nexport default index;\n","// @flow\n\nexport const highlightResults = (result: Object): Object => {\n  const data = { ...result };\n  if (data.highlight) {\n    Object.keys(data.highlight).forEach(highlightItem => {\n      const highlightValue = data.highlight[highlightItem][0];\n      data._source = { ...data._source, [highlightItem]: highlightValue };\n    });\n  }\n  return data;\n};\n\nexport const parseHits = (hits: Array<Object>): Array<Object> => {\n  let results: Array<Object> = [];\n  if (hits) {\n    results = [...hits].map(item => {\n      const streamProps = {};\n\n      if (item._updated) {\n        streamProps._updated = item._updated;\n      } else if (item._deleted) {\n        streamProps._deleted = item._deleted;\n      }\n\n      const data = highlightResults(item);\n      const result = Object.keys(data)\n        .filter(key => key !== '_source')\n        .reduce(\n          (obj: { [key: string]: any }, key: string) => {\n            // eslint-disable-next-line\n            obj[key] = data[key];\n            return obj;\n          },\n          {\n            ...data._source,\n            ...streamProps\n          }\n        );\n      return result;\n    });\n  }\n  return results;\n};\n\n// flattens a nested array\nexport const flatten = (arr: Array<any>) =>\n  arr.reduce(\n    (flat, toFlatten): Array<any> =>\n      flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten),\n    []\n  );\n\n// helper function to extract suggestions\nexport const extractSuggestion = (val: any) => {\n  if (typeof val === 'object') {\n    if (Array.isArray(val)) {\n      return flatten(val);\n    }\n    return null;\n  }\n  return val;\n};\n\nexport const getSuggestions = (\n  fields: Array<string> = [],\n  suggestions: Array<Object>,\n  currentValue: string = ''\n) => {\n  let suggestionsList = [];\n  let labelsList = [];\n\n  const populateSuggestionsList = (val, parsedSource, source) => {\n    // check if the suggestion includes the current value\n    // and not already included in other suggestions\n    const isWordMatch = currentValue\n      .trim()\n      .split(' ')\n      .some(term =>\n        String(val)\n          .toLowerCase()\n          .includes(term)\n      );\n    if ((isWordMatch && !labelsList.includes(val)) || source._promoted) {\n      const defaultOption = {\n        label: val,\n        value: val,\n        source\n      };\n\n      labelsList = [...labelsList, val];\n      suggestionsList = [...suggestionsList, defaultOption];\n    }\n  };\n\n  const parseField = (parsedSource, field = '', source = parsedSource) => {\n    if (typeof parsedSource === 'object') {\n      const fieldNodes = field.split('.');\n      const label = parsedSource[fieldNodes[0]];\n      if (label) {\n        if (fieldNodes.length > 1) {\n          // nested fields of the 'foo.bar.zoo' variety\n          const children = field.substring(fieldNodes[0].length + 1);\n          if (Array.isArray(label)) {\n            label.forEach(arrayItem => {\n              parseField(arrayItem, children, source);\n            });\n          } else {\n            parseField(label, children, source);\n          }\n        } else {\n          const val = extractSuggestion(label);\n          if (val) {\n            if (Array.isArray(val)) {\n              val.forEach(suggestion =>\n                populateSuggestionsList(suggestion, parsedSource, source)\n              );\n            } else {\n              populateSuggestionsList(val, parsedSource, source);\n            }\n          }\n        }\n      }\n    }\n  };\n\n  suggestions.forEach(item => {\n    const { _score, _index, _type, _id } = item;\n\n    const source = {\n      ...item,\n      _id,\n      _index,\n      _score,\n      _type\n    };\n    fields.forEach(field => {\n      parseField(source, field);\n    });\n  });\n\n  return suggestionsList;\n};\n\nexport function parseCompAggToHits(\n  aggFieldName: string,\n  buckets?: Array<Object> = []\n): Array<Object> {\n  return buckets.map(bucket => {\n    // eslint-disable-next-line camelcase\n    const { doc_count, key, [aggFieldName]: hitsData } = bucket;\n    return {\n      _doc_count: doc_count,\n      _key: key[aggFieldName],\n      ...hitsData.hits.hits[0]\n    };\n  });\n}\n","// @flow\n\nimport { parseHits } from './utils';\n\nclass Results {\n  // An array of results obtained from the applied query.\n  data: Array<Object>;\n\n  // Raw response returned by ES query\n  raw: Object;\n\n  // Results parser\n  parseResults: (\n    results: Array<Object>,\n    sourceData?: Array<Object>\n  ) => Array<Object>;\n\n  constructor(data: Array<Object>) {\n    this.data = data || [];\n  }\n\n  // Total number of results found\n  get numberOfResults() {\n    // calculate from raw response\n    if (this.raw && this.raw.hits) {\n      return typeof this.raw.hits.total === 'object'\n        ? this.raw.hits.total.value\n        : this.raw.hits.total;\n    }\n    return 0;\n  }\n\n  // Total time taken by request (in ms)\n  get time() {\n    // calculate from raw response\n    if (this.raw) {\n      return this.raw.took;\n    }\n    return 0;\n  }\n\n  // no of hidden results found\n  get hidden() {\n    if (this.raw && this.raw.hits) {\n      return this.raw.hits.hidden || 0;\n    }\n    return 0;\n  }\n\n  // no of promoted results found\n  get promoted() {\n    if (this.raw && this.raw.promoted) {\n      return this.raw.promoted.length;\n    }\n    return 0;\n  }\n\n  // An array of promoted results obtained from the applied query.\n  get promotedData() {\n    if (this.raw && this.raw.promoted) {\n      return this.raw.promoted || [];\n    }\n    return [];\n  }\n\n  // An object of raw response as-is from elasticsearch query\n  get rawData() {\n    return this.raw || {};\n  }\n\n  // object of custom data applied through queryRules\n  // only works when `enableAppbase=true`\n  get customData() {\n    if (this.raw && this.raw.customData) {\n      return this.raw.customData || {};\n    }\n    return {};\n  }\n\n  setRaw = (rawResponse: Object) => {\n    // set response\n    this.raw = rawResponse;\n    if (rawResponse.hits && rawResponse.hits.hits) {\n      this.setData(rawResponse.hits.hits);\n    }\n  };\n\n  // Method to set data explicitly\n  setData(data: Object) {\n    // parse hits\n    let filteredResults = parseHits(data);\n    // filter results & remove duplicates if any\n    if (this.promotedData.length) {\n      const ids = this.promotedData.map(item => item._id).filter(Boolean);\n      if (ids) {\n        filteredResults = filteredResults.filter(\n          item => !ids.includes(item._id)\n        );\n      }\n\n      filteredResults = [\n        ...this.promotedData.map(dataItem => ({\n          ...dataItem,\n          _promoted: true\n        })),\n        ...filteredResults\n      ];\n    }\n\n    // set data\n    if (this.parseResults) {\n      this.data = this.parseResults(filteredResults, data);\n    } else {\n      this.data = filteredResults;\n    }\n  }\n}\n\nexport default Results;\n","// @flow\n\nimport type { Observer } from './types';\n\nexport default class Observable {\n  observers: Array<Observer>;\n\n  constructor() {\n    this.observers = [];\n  }\n\n  subscribe(fn: Function, propertiesToSubscribe?: string | Array<string>) {\n    this.observers.push({\n      callback: fn,\n      properties: propertiesToSubscribe\n    });\n  }\n\n  unsubscribe(fn: Function) {\n    if (fn) {\n      this.observers = this.observers.filter(item => {\n        if (item.callback !== fn) {\n          return item;\n        }\n        return null;\n      });\n    } else {\n      this.observers = [];\n    }\n  }\n\n  next(o: any, property: string, thisObj: any) {\n    var scope = thisObj || window;\n    this.observers.forEach(item => {\n      // filter by subscribed properties\n      if (item.properties === undefined) {\n        item.callback.call(scope, o);\n      } else if (\n        item.properties instanceof Array &&\n        item.properties.length &&\n        item.properties.includes(property)\n      ) {\n        item.callback.call(scope, o);\n      } else if (\n        typeof item.properties === 'string' &&\n        item.properties &&\n        item.properties === property\n      ) {\n        item.callback.call(scope, o);\n      }\n    });\n  }\n}\n","// @flow\n\nimport { parseCompAggToHits } from './utils';\n\nclass CompositeAggregationResults {\n  // An array of composite aggregations obtained from the applied aggs in options.\n  data: Array<Object>;\n\n  // useful when loading data of greater size\n  afterKey: Object;\n\n  // Raw aggregations returned by ES query\n  raw: Object;\n\n  constructor(data?: Array<Object>) {\n    this.data = data || [];\n  }\n\n  // An object of raw response as-is from elasticsearch query\n  get rawData() {\n    return this.raw || {};\n  }\n\n  setRaw(rawResponse: Object) {\n    // set response\n    this.raw = rawResponse;\n    if (rawResponse.after_key) this.setAfterKey(rawResponse.after_key);\n  }\n\n  setAfterKey(key: Object) {\n    this.afterKey = key;\n  }\n\n  // Method to set data explicitly\n  setData(aggField: string, data: Object) {\n    // parse aggregation buckets\n    this.data = parseCompAggToHits(aggField, data);\n  }\n}\n\nexport default CompositeAggregationResults;\n","// @flow\n\nimport fetch from 'cross-fetch';\nimport AppbaseAnalytics from '@appbaseio/analytics';\nimport Results from './Results';\nimport Observable from './observable';\nimport { getSuggestions } from './utils';\nimport type {\n  AppbaseConfig,\n  AppbaseSettings,\n  DataField,\n  MicStatusField,\n  Options,\n  QueryFormat,\n  RequestStatus,\n  SortOption,\n  Suggestion,\n  Option,\n  SearchBaseConfig\n} from './types';\nimport CompositeAggregationResults from './CompositeAggregationResults';\n\n// mic constants\nconst MIC_STATUS = {\n  inactive: 'INACTIVE',\n  active: 'ACTIVE',\n  denied: 'DENIED'\n};\n\nconst REQUEST_STATUS = {\n  inactive: 'INACTIVE',\n  pending: 'PENDING',\n  error: 'ERROR'\n};\n\nconst defaultOptions: Options = {\n  triggerQuery: true,\n  triggerSuggestionsQuery: false,\n  stateChanges: true\n};\n\nconst defaultOption = {\n  stateChanges: true\n};\n\nclass Searchbase {\n  static defaultQuery: (\n    value: string,\n    options: {\n      dataField: string | Array<string | DataField>,\n      searchOperators?: boolean,\n      queryFormat?: QueryFormat,\n      fuzziness?: string | number,\n      nestedField?: string\n    }\n  ) => Object;\n\n  static shouldQuery: (\n    value: string,\n    dataFields: Array<string | DataField>,\n    options?: {\n      searchOperators?: boolean,\n      queryFormat?: QueryFormat,\n      fuzziness?: string | number\n    }\n  ) => Object;\n\n  static highlightQuery: (\n    highlight: boolean,\n    highlightFields: string | Array<string>,\n    dataFields: string | Array<string | DataField>\n  ) => Object;\n\n  static compositeAggsQuery: (aggregationField: string, size: number) => Object;\n\n  static generateQueryOptions: (options: {\n    size?: number,\n    from?: number,\n    aggregationField?: string,\n    includeFields?: Array<string>,\n    excludeFields?: Array<string>,\n    sortOptions?: Array<SortOption>,\n    sortBy?: string,\n    sortByField?: string\n  }) => Object;\n\n  // es index name\n  index: string;\n\n  // es url\n  url: string;\n\n  // use rs v3 api\n  enableAppbase: boolean;\n\n  // get query suggestions from `.suggestions` index\n  enableQuerySuggestions: boolean;\n\n  // auth credentials if any\n  credentials: string;\n\n  // to enable the recording of analytics\n  appbaseConfig: AppbaseConfig;\n\n  // input value i.e query term\n  value: string;\n\n  // custom headers object\n  headers: Object;\n\n  // suggestions\n  suggestions: Results;\n\n  // query suggestions\n  querySuggestions: Results;\n\n  // composite aggregations\n  aggregationData: CompositeAggregationResults;\n\n  // suggestions query error\n  suggestionsError: any;\n\n  // results\n  results: Results;\n\n  // results query error\n  error: any;\n\n  // state changes subject\n  stateChanges: Observable;\n\n  // request status\n  requestStatus: RequestStatus;\n\n  // suggestions request status\n  suggestionsRequestStatus: RequestStatus;\n\n  // following are the es query options\n\n  nestedField: string;\n\n  queryFormat: QueryFormat;\n\n  searchOperators: boolean;\n\n  size: number;\n\n  from: number;\n\n  fuzziness: string | number;\n\n  sortBy: string;\n\n  sortByField: string;\n\n  dataField: string | Array<string | DataField>;\n\n  aggregationField: string;\n\n  includeFields: Array<string>;\n\n  excludeFields: Array<string>;\n\n  sortOptions: Array<SortOption>;\n\n  highlight: boolean;\n\n  highlightField: string | Array<string>;\n\n  /* ------------- change events -------------------------------- */\n\n  // called when value changes\n  onValueChange: (next: string, prev: string) => void;\n\n  // called when results change\n  onResults: (next: string, prev: string) => void;\n\n  // called when suggestions change\n  onSuggestions: (next: string, prev: string) => void;\n\n  // called when query suggestions change\n  onQuerySuggestions: (next: string, prev: string) => void;\n\n  // called when composite aggregations change\n  onAggregationData: (next: Array<Object>, prev: Array<Object>) => void;\n\n  // called when there is an error while fetching results\n  onError: (error: any) => void;\n\n  // called when there is an error while fetching suggestions\n  onSuggestionsError: (error: any) => void;\n\n  // called when request status changes\n  onRequestStatusChange: (next: string, prev: string) => void;\n\n  // called when suggestions request status changes\n  onSuggestionsRequestStatusChange: (next: string, prev: string) => void;\n\n  // called when query changes\n  onQueryChange: (next: string, prev: string) => void;\n\n  // called when suggestions query changes\n  onSuggestionsQueryChange: (next: string, prev: string) => void;\n\n  // called when mic status changes\n  onMicStatusChange: (next: string, prev: string) => void;\n\n  /* ---- callbacks to create the side effects while querying ----- */\n\n  transformQuery: (query: Object) => Promise<Object>;\n\n  transformSuggestionsQuery: (query: Object) => Promise<Object>;\n\n  transformRequest: (requestOptions: Object) => Promise<Object>;\n\n  transformResponse: (response: any) => Promise<any>;\n\n  beforeValueChange: (value: string) => Promise<any>;\n\n  /* ------ Private properties only for the internal use ----------- */\n\n  // counterpart of the query\n  _query: Object;\n\n  // counterpart of the suggestions query\n  _suggestionsQuery: Object;\n\n  _queryOptions: Object;\n\n  // mic status\n  _micStatus: MicStatusField;\n\n  // mic instance\n  _micInstance: any;\n\n  // analytics instance\n  _analyticsInstance: Object;\n\n  // query search ID\n  _queryId: string;\n\n  constructor({\n    index,\n    url,\n    enableAppbase,\n    enableQuerySuggestions,\n    credentials,\n    appbaseConfig,\n    headers,\n    value,\n    suggestions,\n    querySuggestions,\n    results,\n    fuzziness,\n    searchOperators,\n    queryFormat,\n    size,\n    from,\n    dataField,\n    aggregationField,\n    includeFields,\n    excludeFields,\n    transformQuery,\n    transformSuggestionsQuery,\n    transformRequest,\n    transformResponse,\n    beforeValueChange,\n    sortBy,\n    nestedField,\n    sortOptions,\n    sortByField,\n    highlight,\n    highlightField\n  }: SearchBaseConfig) {\n    if (!index) {\n      throw new Error('Please provide a valid index.');\n    }\n    if (!url) {\n      throw new Error('Please provide a valid url.');\n    }\n    if (!(enableAppbase || dataField)) {\n      throw new Error('Please provide a valid data field.');\n    }\n    this.index = index;\n    this.url = url;\n    this.enableAppbase = enableAppbase || false;\n    this.enableQuerySuggestions = enableQuerySuggestions || false;\n    this.appbaseConfig = appbaseConfig;\n    this._analyticsInstance = AppbaseAnalytics.init({\n      index,\n      url,\n      credentials\n    });\n    this.dataField = dataField;\n    this.aggregationField = aggregationField;\n    this.credentials = credentials || '';\n    this.nestedField = nestedField;\n    this.queryFormat = queryFormat || 'or';\n    this.fuzziness = fuzziness || 0;\n    this.searchOperators = searchOperators || false;\n    this.size = Number(size) || 10;\n    this.from = Number(from) || 0;\n    this.sortBy = sortBy;\n    this.includeFields = includeFields || ['*'];\n    this.excludeFields = excludeFields || [];\n    this.sortOptions = sortOptions || null;\n    this.sortByField = sortByField;\n    this.highlight = highlight;\n    this.highlightField = highlightField;\n\n    this.requestStatus = REQUEST_STATUS.inactive;\n    this.suggestionsRequestStatus = REQUEST_STATUS.inactive;\n\n    this.transformRequest = transformRequest || null;\n    this.transformResponse = transformResponse || null;\n    this.transformQuery = transformQuery || null;\n    this.transformSuggestionsQuery = transformSuggestionsQuery || null;\n    this.beforeValueChange = beforeValueChange || null;\n\n    // Initialize the state changes observable\n    this.stateChanges = new Observable();\n\n    // Initialize the results\n    this.suggestions = new Results(suggestions);\n    // Add suggestions parser\n    this.suggestions.parseResults = this._parseSuggestions;\n\n    // Initialize query suggestions\n    this.querySuggestions = new Results(querySuggestions);\n    // Add suggestions parser\n    this.querySuggestions.parseResults = this._parseQuerySuggestions;\n\n    this.results = new Results(results);\n\n    // composite aggs instance\n    this.aggregationData = new CompositeAggregationResults();\n\n    // Initialize headers\n    this.headers = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    };\n    if (this.credentials) {\n      this.headers = {\n        ...this.headers,\n        Authorization: `Basic ${btoa(this.credentials)}`\n      };\n    }\n    if (headers) {\n      this.setHeaders(headers, {\n        stateChanges: false\n      });\n    }\n\n    if (value) {\n      this.setValue(value, {\n        stateChanges: true\n      });\n    } else {\n      this.value = '';\n    }\n  }\n\n  // getters\n  get micStatus() {\n    return this._micStatus;\n  }\n\n  get micInstance() {\n    return this._micInstance;\n  }\n\n  get micActive() {\n    return this._micStatus === MIC_STATUS.active;\n  }\n\n  get micInactive() {\n    return this._micStatus === MIC_STATUS.inactive;\n  }\n\n  get micDenied() {\n    return this._micStatus === MIC_STATUS.denied;\n  }\n\n  get query() {\n    return this._query;\n  }\n\n  get suggestionsQuery() {\n    return this._suggestionsQuery;\n  }\n\n  get requestPending() {\n    return this.requestStatus === REQUEST_STATUS.pending;\n  }\n\n  get suggestionsRequestPending() {\n    return this.suggestionsRequestStatus === REQUEST_STATUS.pending;\n  }\n\n  // Method to subscribe the state changes\n  subscribeToStateChanges(\n    fn: Function,\n    propertiesToSubscribe?: string | Array<string>\n  ) {\n    this.stateChanges.subscribe(fn, propertiesToSubscribe);\n  }\n\n  // Method to unsubscribe the state changes\n  unsubscribeToStateChanges(fn?: Function) {\n    this.stateChanges.unsubscribe(fn);\n  }\n\n  // Method to set the custom headers\n  setHeaders(headers: Object, options?: Options = defaultOptions): void {\n    const prev = this.headers;\n    this.headers = {\n      ...this.headers,\n      ...headers\n    };\n    this._applyOptions(options, 'headers', prev, this.headers);\n  }\n\n  // Method to set the size option\n  setSize(size: number, options?: Options = defaultOptions): void {\n    const prev = this.size;\n    this.size = size;\n    this._applyOptions(options, 'size', prev, this.size);\n  }\n\n  // Method to set the from option\n  setFrom(from: number, options?: Options = defaultOptions): void {\n    const prev = this.from;\n    this.from = from;\n    this._applyOptions(options, 'from', prev, this.from);\n  }\n\n  // Method to set the fuzziness option\n  setFuzziness(\n    fuzziness: number | string,\n    options?: Options = defaultOptions\n  ): void {\n    const prev = this.fuzziness;\n    this.fuzziness = fuzziness;\n    this._applyOptions(options, 'fuzziness', prev, this.fuzziness);\n  }\n\n  // Method to set the includeFields option\n  setIncludeFields(\n    includeFields: Array<string>,\n    options?: Options = defaultOptions\n  ): void {\n    const prev = this.includeFields;\n    this.includeFields = includeFields;\n    this._applyOptions(options, 'includeFields', prev, includeFields);\n  }\n\n  // Method to set the excludeFields option\n  setExcludeFields(\n    excludeFields: Array<string>,\n    options?: Options = defaultOptions\n  ): void {\n    const prev = this.excludeFields;\n    this.excludeFields = excludeFields;\n    this._applyOptions(options, 'excludeFields', prev, excludeFields);\n  }\n\n  // Method to set the sortBy option\n  setSortBy(sortBy: string, options?: Options = defaultOptions): void {\n    const prev = this.sortBy;\n    this.sortBy = sortBy;\n    this._applyOptions(options, 'sortBy', prev, sortBy);\n  }\n\n  // Method to set the sortByField option\n  setSortByField(\n    sortByField: string,\n    options?: Options = defaultOptions\n  ): void {\n    const prev = this.sortByField;\n    this.sortByField = sortByField;\n    this._applyOptions(options, 'sortByField', prev, sortByField);\n  }\n\n  // Method to set the nestedField option\n  setNestedField(\n    nestedField: string,\n    options?: Options = defaultOptions\n  ): void {\n    const prev = this.nestedField;\n    this.nestedField = nestedField;\n    this._applyOptions(options, 'nestedField', prev, nestedField);\n  }\n\n  // Method to set the dataField option\n  setDataField(\n    dataField: string | Array<string | DataField>,\n    options?: Options = defaultOptions\n  ): void {\n    const prev = this.dataField;\n    this.dataField = dataField;\n    this._applyOptions(options, 'dataField', prev, dataField);\n  }\n\n  // Method to set the custom results\n  setResults(results: Array<Object>, options?: Option = defaultOption): void {\n    if (results) {\n      const prev = this.results;\n      this.results = new Results(results);\n      this._applyOptions(\n        {\n          stateChanges: options.stateChanges\n        },\n        'results',\n        prev,\n        this.results\n      );\n    }\n  }\n\n  // Method to set the custom suggestions\n  setSuggestions(\n    suggestions: Array<Suggestion>,\n    options?: Option = defaultOption\n  ): void {\n    if (suggestions) {\n      const prev = this.suggestions;\n      this.suggestions = new Results(suggestions);\n      this.suggestions.parseResults = this._parseSuggestions;\n      this._applyOptions(\n        {\n          stateChanges: options.stateChanges\n        },\n        'suggestions',\n        prev,\n        this.suggestions\n      );\n    }\n  }\n\n  // Method to set the value\n  setValue(value: string, options?: Options = defaultOptions): void {\n    const performUpdate = () => {\n      const prev = this.value;\n      this.value = value;\n      this._applyOptions(options, 'value', prev, this.value);\n    };\n    if (this.beforeValueChange) {\n      this.beforeValueChange(value)\n        .then(performUpdate)\n        .catch(e => {\n          console.warn('beforeValueChange rejected the promise with ', e);\n        });\n    } else {\n      performUpdate();\n    }\n  }\n\n  // mic event\n  onMicClick = (micOptions: Object = {}, options: Options = defaultOptions) => {\n    const prevStatus = this._micStatus;\n    if (typeof window !== 'undefined') {\n      window.SpeechRecognition =\n        window.webkitSpeechRecognition || window.SpeechRecognition || null;\n    }\n    if (\n      window &&\n      window.SpeechRecognition &&\n      prevStatus !== MIC_STATUS.denied\n    ) {\n      if (prevStatus === MIC_STATUS.active) {\n        this._setMicStatus(MIC_STATUS.inactive, options);\n      }\n      const { SpeechRecognition } = window;\n      if (this._micInstance) {\n        this._stopMic();\n        return;\n      }\n      this._micInstance = new SpeechRecognition();\n      this._micInstance.continuous = true;\n      this._micInstance.interimResults = true;\n      Object.assign(this._micInstance, micOptions);\n      this._micInstance.start();\n      this._micInstance.onstart = () => {\n        this._setMicStatus(MIC_STATUS.active, options);\n      };\n      this._micInstance.onresult = ({ results }) => {\n        if (results && results[0] && results[0].isFinal) {\n          this._stopMic();\n        }\n        this._handleVoiceResults({ results }, options);\n      };\n      this._micInstance.onerror = e => {\n        if (e.error === 'no-speech' || e.error === 'audio-capture') {\n          this._setMicStatus(MIC_STATUS.inactive, options);\n        } else if (e.error === 'not-allowed') {\n          this._setMicStatus(MIC_STATUS.denied, options);\n        }\n        console.error(e);\n      };\n    }\n  };\n\n  // Method to execute the query\n  triggerQuery(options?: Option = defaultOption): Promise<any> {\n    const handleError = err => {\n      this._setError(err, {\n        stateChanges: options.stateChanges\n      });\n      console.error(err);\n      return Promise.reject(err);\n    };\n    try {\n      this._updateQuery();\n      this._setRequestStatus(REQUEST_STATUS.pending);\n      const transformQuery = this.transformQuery\n        ? this.transformQuery(this.query)\n        : new Promise(res => res(this.query));\n      return transformQuery\n        .then(finalQuery => {\n          this._fetchRequest(finalQuery)\n            .then(results => {\n              this._setRequestStatus(REQUEST_STATUS.inactive);\n              const prev = this.results;\n              let rawResults = results;\n              if (this.enableAppbase) rawResults = results.SearchResult;\n              this.results.setRaw(rawResults);\n              this._applyOptions(\n                {\n                  stateChanges: options.stateChanges\n                },\n                'results',\n                prev,\n                this.results\n              );\n              return Promise.resolve(rawResults);\n            })\n            .catch(handleError);\n        })\n        .catch(handleError);\n    } catch (err) {\n      return handleError(err);\n    }\n  }\n\n  // Method to execute the suggestions query\n  triggerSuggestionsQuery(options?: Option = defaultOption): Promise<any> {\n    const handleError = err => {\n      this._setSuggestionsError(err, {\n        stateChanges: options.stateChanges\n      });\n      console.error(err);\n      return Promise.reject(err);\n    };\n\n    try {\n      this._updateSuggestionsQuery();\n      this._setSuggestionsRequestStatus(REQUEST_STATUS.pending);\n      const transformSuggestionsQuery = this.transformSuggestionsQuery\n        ? this.transformSuggestionsQuery(this.suggestionsQuery)\n        : new Promise(res => res(this.suggestionsQuery));\n      return transformSuggestionsQuery\n        .then(finalQuery => {\n          this._fetchRequest(finalQuery)\n            .then(suggestions => {\n              let rawSuggestions = suggestions;\n              if (this.enableAppbase) rawSuggestions = suggestions.DataSearch;\n              if (this.enableAppbase && this.enableQuerySuggestions) {\n                this._fetchRequest(this.getSuggestionsQuery(), true)\n                  .then(rawQuerySuggestions => {\n                    this._setSuggestionsRequestStatus(REQUEST_STATUS.inactive);\n                    this._handleQuerySuggestionsResponse(\n                      rawQuerySuggestions,\n                      options\n                    );\n                  })\n                  .catch(handleError);\n              } else this._setSuggestionsRequestStatus(REQUEST_STATUS.inactive);\n              if (rawSuggestions.aggregations) {\n                this._handleCompositeAggsResponse(\n                  this.aggregationField,\n                  rawSuggestions.aggregations,\n                  options\n                );\n              }\n              const prev = this.suggestions;\n              this.suggestions.setRaw(rawSuggestions);\n              this._applyOptions(\n                {\n                  stateChanges: options.stateChanges\n                },\n                'suggestions',\n                prev,\n                this.suggestions\n              );\n              return Promise.resolve(rawSuggestions);\n            })\n            .catch(handleError);\n        })\n        .catch(handleError);\n    } catch (err) {\n      return handleError(err);\n    }\n  }\n\n  getSuggestionsQuery() {\n    return {\n      query: [\n        {\n          id: 'DataSearch__suggestions',\n          dataField: ['key', 'key.autosuggest', 'key.search'],\n          searchOperators: this.searchOperators,\n          size: 5,\n          value: this.value,\n          defaultQuery: {\n            sort: [\n              {\n                count: {\n                  order: 'desc'\n                }\n              }\n            ]\n          }\n        }\n      ]\n    };\n  }\n\n  /*\n   methods to record analytics\n  */\n\n  // use this methods to record a search click event\n  recordClick = (objects: Object, isSuggestionClick: boolean = false): void => {\n    if (this._analyticsInstance && this._queryId) {\n      this._analyticsInstance.click({\n        queryID: this._queryId,\n        objects,\n        isSuggestionClick\n      });\n    }\n  };\n\n  // use this methods to record a search conversion\n  recordConversions = (objects: Array<string>) => {\n    if (this._analyticsInstance && this._queryId) {\n      this._analyticsInstance.conversion({\n        queryID: this._queryId,\n        objects\n      });\n    }\n  };\n\n  /* -------- Private methods only for the internal use -------- */\n  // mic\n  _handleVoiceResults = (\n    { results }: Object,\n    options?: Options = defaultOptions\n  ) => {\n    if (\n      results &&\n      results[0] &&\n      results[0].isFinal &&\n      results[0][0] &&\n      results[0][0].transcript &&\n      results[0][0].transcript.trim()\n    ) {\n      this.setValue(results[0][0].transcript.trim(), options);\n    }\n  };\n\n  _stopMic = () => {\n    if (this._micInstance) {\n      this._micInstance.stop();\n      this._micInstance = null;\n      this._setMicStatus(MIC_STATUS.inactive);\n    }\n  };\n\n  _setMicStatus = (\n    status: MicStatusField,\n    options: Options = defaultOptions\n  ) => {\n    const prevStatus = this._micStatus;\n    this._micStatus = status;\n    this._applyOptions(options, 'micStatus', prevStatus, this._micStatus);\n  };\n\n  _handleCompositeAggsResponse(\n    aggregationField: string,\n    aggsResponse: Object,\n    options?: Options = defaultOptions\n  ) {\n    const prev = this.aggregationData;\n    this.aggregationData.setRaw(aggsResponse[aggregationField]);\n    this.aggregationData.setData(\n      aggregationField,\n      aggsResponse[aggregationField].buckets\n    );\n    this._applyOptions(\n      { stateChanges: options.stateChanges },\n      'aggregations',\n      prev,\n      this.aggregationData\n    );\n  }\n\n  _handleTransformResponse(res: any): Promise<any> {\n    if (\n      this.transformResponse &&\n      typeof this.transformResponse === 'function'\n    ) {\n      return this.transformResponse(res);\n    }\n    return new Promise(resolve => resolve(res));\n  }\n\n  _handleTransformRequest(requestOptions: any): Promise<any> {\n    if (this.transformRequest && typeof this.transformRequest === 'function') {\n      return this.transformRequest(requestOptions);\n    }\n    return new Promise(resolve => resolve(requestOptions));\n  }\n\n  _handleQuerySuggestionsResponse(\n    rawQuerySuggestions: Object,\n    options: Option\n  ) {\n    const prev = this.querySuggestions;\n    const querySuggestions =\n      rawQuerySuggestions && rawQuerySuggestions.DataSearch__suggestions;\n    this.querySuggestions.setRaw(querySuggestions);\n    this._applyOptions(\n      {\n        stateChanges: options.stateChanges\n      },\n      'querySuggestions',\n      prev,\n      this.querySuggestions\n    );\n  }\n\n  _fetchRequest(\n    requestBody: Object,\n    isQuerySuggestionsAPI: boolean = false\n  ): Promise<*> {\n    const requestOptions = {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        ...this.headers\n      }\n    };\n\n    return new Promise((resolve, reject) => {\n      this._handleTransformRequest(requestOptions)\n        .then(finalRequestOptions => {\n          // set timestamp in request\n          const timestamp = Date.now();\n\n          let suffix = '_search';\n          if (this.enableAppbase) suffix = '_reactivesearch.v3';\n          const index = isQuerySuggestionsAPI ? '.suggestions' : this.index;\n          return fetch(`${this.url}/${index}/${suffix}`, finalRequestOptions)\n            .then(res => {\n              const responseHeaders = res.headers;\n\n              // set search id\n              if (res.headers) {\n                this._queryId = res.headers.get('X-Search-Id') || null;\n              }\n\n              if (res.status >= 500) {\n                return reject(res);\n              }\n              if (res.status >= 400) {\n                return reject(res);\n              }\n              return res.json().then(data => {\n                this._handleTransformResponse(data)\n                  .then(transformedData => {\n                    if (\n                      transformedData &&\n                      Object.prototype.hasOwnProperty.call(\n                        transformedData,\n                        'error'\n                      )\n                    ) {\n                      reject(transformedData);\n                    }\n                    const response = {\n                      ...transformedData,\n                      _timestamp: timestamp,\n                      _headers: responseHeaders\n                    };\n                    return resolve(response);\n                  })\n                  .catch(e => {\n                    console.warn(\n                      'transformResponse rejected the promise with ',\n                      e\n                    );\n                    return reject(e);\n                  });\n              });\n            })\n            .catch(e => reject(e));\n        })\n        .catch(e => {\n          console.warn('transformRequest rejected the promise with ', e);\n          return reject(e);\n        });\n    });\n  }\n\n  _setSuggestionsError(\n    suggestionsError: any,\n    options?: Options = defaultOptions\n  ) {\n    this._setSuggestionsRequestStatus(REQUEST_STATUS.error);\n    const prev = this.suggestionsError;\n    this.suggestionsError = suggestionsError;\n    this._applyOptions(\n      options,\n      'suggestionsError',\n      prev,\n      this.suggestionsError\n    );\n  }\n\n  _setError(error: any, options?: Options = defaultOptions) {\n    this._setRequestStatus(REQUEST_STATUS.error);\n    const prev = this.error;\n    this.error = error;\n    this._applyOptions(options, 'error', prev, this.error);\n  }\n\n  _setRequestStatus(requestStatus: RequestStatus) {\n    const prev = this.requestStatus;\n    this.requestStatus = requestStatus;\n    this._applyOptions(\n      {\n        stateChanges: true\n      },\n      'requestStatus',\n      prev,\n      this.requestStatus\n    );\n  }\n\n  _setSuggestionsRequestStatus(suggestionsRequestStatus: RequestStatus) {\n    const prev = this.suggestionsRequestStatus;\n    this.suggestionsRequestStatus = suggestionsRequestStatus;\n    this._applyOptions(\n      {\n        stateChanges: true\n      },\n      'suggestionsRequestStatus',\n      prev,\n      this.suggestionsRequestStatus\n    );\n  }\n\n  // Method to set the default query value\n  _updateQuery(query?: Object, queryOptions?: Object): void {\n    let prevQuery;\n    if (this.enableAppbase) {\n      prevQuery = { ...this._query };\n      this._query = {\n        query: [\n          { ...this.getAppbaseSuggestionsQuery(), execute: false },\n          this.getAppbaseResultQuery()\n        ],\n        settings: this.getAppbaseSettings()\n      };\n    } else prevQuery = this.getPreviousQuery(query, queryOptions);\n    this._applyOptions(\n      {\n        stateChanges: false\n      },\n      'query',\n      prevQuery,\n      this._query\n    );\n  }\n\n  getAppbaseSettings(): AppbaseSettings {\n    const {\n      recordAnalytics,\n      customEvents,\n      enableQueryRules,\n      userId\n    } = this.appbaseConfig;\n    return { recordAnalytics, customEvents, enableQueryRules, userId };\n  }\n\n  getAppbaseResultQuery(): {|\n    dataField: Array<string>,\n    excludeFields: Array<string>,\n    from: number,\n    id: string,\n    includeFields: Array<string>,\n    react: {| and: string |},\n    size: number,\n    sortBy: string\n  |} {\n    return {\n      id: 'SearchResult',\n      dataField: this.getDataFields(),\n      from: this.from,\n      size: this.size,\n      sortBy: this.sortBy,\n      includeFields: this.includeFields,\n      excludeFields: this.excludeFields,\n      react: { and: 'DataSearch' }\n    };\n  }\n\n  getPreviousQuery(query?: Object, queryOptions?: Object) {\n    // Set default query here\n    const finalQueryOptions = Searchbase.generateQueryOptions({\n      excludeFields: this.excludeFields,\n      includeFields: this.includeFields,\n      size: this.size,\n      from: this.from,\n      sortBy: this.sortBy,\n      sortByField: this.sortByField,\n      sortOptions: this.sortOptions\n    });\n    /**\n     * First priority goes to the custom query set by user otherwise execute the default query\n     * If none of the two exists execute the match_all\n     */\n    const finalQuery = query ||\n      Searchbase.defaultQuery(this.value, {\n        dataField: this.dataField,\n        searchOperators: this.searchOperators,\n        queryFormat: this.queryFormat,\n        fuzziness: this.fuzziness,\n        nestedField: this.nestedField\n      }) || {\n        match_all: {}\n      };\n    const prevQuery = this._query;\n    this._query = {\n      query: finalQuery,\n      ...Searchbase.highlightQuery(\n        this.highlight,\n        this.highlightField,\n        this.dataField\n      ),\n      ...finalQueryOptions,\n      // Overrides the default options by the user defined options\n      ...queryOptions\n    };\n    return prevQuery;\n  }\n\n  _updateSuggestionsQuery(query?: Object, queryOptions?: Object): void {\n    let prevQuery;\n    if (this.enableAppbase) {\n      prevQuery = { ...this._suggestionsQuery };\n      this._suggestionsQuery = {\n        query: [this.getAppbaseSuggestionsQuery()],\n        settings: this.getAppbaseSettings()\n      };\n    } else prevQuery = this.getPreviousSuggestionsQuery(query, queryOptions);\n    this._applyOptions(\n      {\n        stateChanges: false\n      },\n      'suggestionsQuery',\n      prevQuery,\n      this._suggestionsQuery\n    );\n  }\n\n  getAppbaseSuggestionsQuery(): {|\n    aggregationField: string,\n    dataField: Array<string>,\n    excludeFields: Array<string>,\n    from: number,\n    fuzziness: number | string,\n    highlight: boolean,\n    highlightField: string | Array<string>,\n    id: string,\n    includeFields: Array<string>,\n    nestedField: string,\n    queryFormat: any,\n    searchOperators: boolean,\n    size: number,\n    sortBy: string,\n    value: string\n  |} {\n    return {\n      id: 'DataSearch',\n      dataField: this.getDataFields(),\n      value: this.value,\n      queryFormat: this.queryFormat,\n      nestedField: this.nestedField,\n      from: this.from,\n      size: this.size,\n      sortBy: this.sortBy,\n      aggregationField: this.aggregationField,\n      includeFields: this.includeFields,\n      excludeFields: this.excludeFields,\n      fuzziness: this.fuzziness,\n      searchOperators: this.searchOperators,\n      highlight: this.highlight,\n      highlightField: this.highlightField\n    };\n  }\n\n  getPreviousSuggestionsQuery(query?: Object, queryOptions?: Object) {\n    // Set default suggestions query here\n    const finalQueryOptions = Searchbase.generateQueryOptions({\n      aggregationField: this.aggregationField,\n      size: this.size\n    });\n    /**\n     * First priority goes to the custom query set by user otherwise execute the default query\n     * If none of the two exists execute the match_all\n     */\n    const finalQuery = query ||\n      Searchbase.defaultQuery(this.value, {\n        dataField: this.dataField,\n        searchOperators: this.searchOperators,\n        queryFormat: this.queryFormat,\n        fuzziness: this.fuzziness,\n        nestedField: this.nestedField\n      }) || {\n        match_all: {}\n      };\n    const prevQuery = { ...this._suggestionsQuery };\n    this._suggestionsQuery = {\n      query: finalQuery,\n      ...Searchbase.highlightQuery(\n        this.highlight,\n        this.highlightField,\n        this.dataField\n      ),\n      ...finalQueryOptions,\n      // Overrides the default options by the user defined options\n      ...queryOptions\n    };\n    return prevQuery;\n  }\n\n  _parseSuggestions = (\n    suggestions: Array<Object>,\n    sourceSuggestions?: Array<Object>\n  ): Array<Object> => {\n    let fields = this.getDataFields();\n    if (\n      fields.length === 0 &&\n      sourceSuggestions &&\n      Array.isArray(sourceSuggestions) &&\n      sourceSuggestions.length > 0 &&\n      sourceSuggestions[0] &&\n      sourceSuggestions[0]._source\n    ) {\n      // Extract fields from _source\n      fields = Object.keys(sourceSuggestions[0]._source);\n    }\n    return getSuggestions(fields, suggestions, this.value).slice(0, this.size);\n  };\n\n  _parseQuerySuggestions = (suggestions: Array<Object>): Array<Object> => {\n    const fields = ['key', 'key.autosuggest', 'key.search'];\n    return getSuggestions(fields, suggestions, this.value);\n  };\n\n  getDataFields(): Array<string> {\n    let fields: Array<string> = [];\n    if (this.dataField === 'string') {\n      fields = [this.dataField];\n    } else if (Array.isArray(this.dataField)) {\n      this.dataField.forEach((dataField: string | DataField) => {\n        if (typeof dataField === 'object') {\n          fields.push(dataField.field);\n        } else {\n          fields.push(dataField);\n        }\n      });\n    }\n    return fields;\n  }\n\n  // Method to apply the changed based on set options\n  _applyOptions(\n    options: Options,\n    key: string,\n    prevValue: any,\n    nextValue: any\n  ): void {\n    // Trigger mic events\n    if (key === 'micStatus' && this.onMicStatusChange) {\n      this.onMicStatusChange(nextValue, prevValue);\n    }\n    // Trigger events\n    if (key === 'query' && this.onQueryChange) {\n      this.onQueryChange(nextValue, prevValue);\n    }\n    if (key === 'suggestionsQuery' && this.onSuggestionsQueryChange) {\n      this.onSuggestionsQueryChange(nextValue, prevValue);\n    }\n    if (key === 'value' && this.onValueChange) {\n      this.onValueChange(nextValue, prevValue);\n    }\n    if (key === 'error' && this.onError) {\n      this.onError(nextValue);\n    }\n    if (key === 'suggestionsError' && this.onSuggestionsError) {\n      this.onSuggestionsError(nextValue);\n    }\n    if (key === 'results' && this.onResults) {\n      this.onResults(nextValue, prevValue);\n    }\n    if (key === 'suggestions' && this.onSuggestions) {\n      this.onSuggestions(nextValue, prevValue);\n    }\n    if (key === 'querySuggestions' && this.onQuerySuggestions) {\n      this.onQuerySuggestions(nextValue, prevValue);\n    }\n    if (key === 'aggregations' && this.onAggregationData) {\n      this.onAggregationData(nextValue, prevValue);\n    }\n    if (key === 'requestStatus' && this.onRequestStatusChange) {\n      this.onRequestStatusChange(nextValue, prevValue);\n    }\n    if (\n      key === 'suggestionsRequestStatus' &&\n      this.onSuggestionsRequestStatusChange\n    ) {\n      this.onSuggestionsRequestStatusChange(nextValue, prevValue);\n    }\n    if (options.triggerQuery) {\n      this.triggerQuery();\n    }\n    if (options.triggerSuggestionsQuery) {\n      this.triggerSuggestionsQuery();\n    }\n    if (options.stateChanges !== false) {\n      this.stateChanges.next(\n        {\n          [key]: {\n            prev: prevValue,\n            next: nextValue\n          }\n        },\n        key\n      );\n    }\n  }\n}\n\n/* ------------------ Static methods ------------------------------ */\n\n// function to generate the default query DSL\nSearchbase.defaultQuery = (value, options) => {\n  let finalQuery = null;\n  let fields;\n\n  if (value) {\n    if (Array.isArray(options.dataField)) {\n      fields = options.dataField;\n    } else {\n      fields = [options.dataField];\n    }\n\n    if (options.searchOperators) {\n      finalQuery = {\n        simple_query_string: Searchbase.shouldQuery(value, fields, options)\n      };\n    } else {\n      finalQuery = {\n        bool: {\n          should: Searchbase.shouldQuery(value, fields, options),\n          minimum_should_match: '1'\n        }\n      };\n    }\n  }\n\n  if (value === '') {\n    finalQuery = null;\n  }\n\n  if (finalQuery && options.nestedField) {\n    finalQuery = {\n      nested: {\n        path: options.nestedField,\n        query: finalQuery\n      }\n    };\n  }\n\n  return finalQuery;\n};\n\n// helper function of default query\nSearchbase.shouldQuery = (\n  value,\n  dataFields,\n  options = {\n    searchOperators: false,\n    queryFormat: 'or',\n    fuzziness: 0\n  }\n) => {\n  const fields = dataFields.map((dataField: string | DataField) => {\n    if (typeof dataField === 'object') {\n      return `${dataField.field}${\n        dataField.weight ? `^${dataField.weight}` : ''\n      }`;\n    }\n    return dataField;\n  });\n\n  if (options.searchOperators) {\n    return {\n      query: value,\n      fields,\n      default_operator: options.queryFormat\n    };\n  }\n\n  if (options.queryFormat === 'and') {\n    return [\n      {\n        multi_match: {\n          query: value,\n          fields,\n          type: 'cross_fields',\n          operator: 'and'\n        }\n      },\n      {\n        multi_match: {\n          query: value,\n          fields,\n          type: 'phrase',\n          operator: 'and'\n        }\n      }\n    ];\n  }\n\n  return [\n    {\n      multi_match: {\n        query: value,\n        fields,\n        type: 'best_fields',\n        operator: 'or',\n        fuzziness: options.fuzziness\n      }\n    },\n    {\n      multi_match: {\n        query: value,\n        fields,\n        type: 'phrase',\n        operator: 'or'\n      }\n    }\n  ];\n};\n\n// helper function to generate highlight query\nSearchbase.highlightQuery = (highlight, highlightFields, dataFields) => {\n  if (!highlight) return null;\n  const fields = {};\n  const highlightField = highlightFields || dataFields;\n  const flatHighlightedFields =\n    typeof highlightFields === 'string' ? [highlightFields] : highlightFields;\n\n  if (typeof highlightField === 'string') {\n    fields[highlightField] = {};\n  } else if (Array.isArray(highlightField)) {\n    highlightField.forEach(item => {\n      if (typeof item === 'object') fields[item.field] = {};\n      else fields[item] = {};\n    });\n  }\n\n  return {\n    highlight: {\n      pre_tags: ['<mark>'],\n      post_tags: ['</mark>'],\n      fields,\n      ...(flatHighlightedFields && { require_field_match: false })\n    }\n  };\n};\n\n// helper function to generate composite aggregations query\nSearchbase.compositeAggsQuery = (aggregationField, size) => ({\n  aggs: {\n    [aggregationField]: {\n      composite: {\n        sources: [\n          {\n            [aggregationField]: {\n              terms: {\n                field: aggregationField\n              }\n            }\n          }\n        ],\n        size\n      },\n      aggs: {\n        [aggregationField]: {\n          top_hits: { size: 1 }\n        }\n      }\n    }\n  }\n});\n\n// function to generate the query DSL options\nSearchbase.generateQueryOptions = options => {\n  const finalOptions = {};\n  if (options.size !== undefined) {\n    finalOptions.size = options.size;\n  }\n  if (options.from !== undefined) {\n    finalOptions.from = options.from;\n  }\n  if (options.includeFields || options.excludeFields) {\n    const source = {};\n    if (options.includeFields) {\n      source.includes = options.includeFields;\n    }\n    if (options.excludeFields) {\n      source.excludes = options.excludeFields;\n    }\n    finalOptions._source = source;\n  }\n\n  if (options.sortOptions) {\n    finalOptions.sort = [\n      {\n        [options.sortOptions[0].dataField]: {\n          order: options.sortOptions[0].sortBy\n        }\n      }\n    ];\n  } else if (options.sortBy && options.sortByField) {\n    finalOptions.sort = [\n      {\n        [options.sortByField]: {\n          order: options.sortBy\n        }\n      }\n    ];\n  }\n  if (options.aggregationField) {\n    finalOptions.aggs = Searchbase.compositeAggsQuery(\n      options.aggregationField,\n      options.size || 0\n    ).aggs;\n  }\n  return finalOptions;\n};\n\nexport default Searchbase;\n"],"names":["__self__","root","F","fetch","DOMException","prototype","self","this","exports","support","Symbol","Blob","e","viewClasses","isArrayBufferView","ArrayBuffer","isView","obj","indexOf","Object","toString","call","normalizeName","name","String","test","TypeError","toLowerCase","normalizeValue","value","iteratorFor","items","iterator","next","shift","done","undefined","Headers","headers","map","forEach","append","Array","isArray","header","getOwnPropertyNames","consumed","body","bodyUsed","Promise","reject","fileReaderReady","reader","resolve","onload","result","onerror","error","readBlobAsArrayBuffer","blob","FileReader","promise","readAsArrayBuffer","bufferClone","buf","slice","view","Uint8Array","byteLength","set","buffer","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","URLSearchParams","DataView","_bodyArrayBuffer","get","type","rejected","Error","arrayBuffer","then","text","readAsText","chars","length","i","fromCharCode","join","readArrayBufferAsText","formData","decode","json","JSON","parse","oldValue","has","hasOwnProperty","callback","thisArg","keys","push","values","entries","methods","Request","input","options","method","upcased","url","credentials","mode","signal","toUpperCase","referrer","form","trim","split","bytes","replace","decodeURIComponent","Response","bodyInit","status","ok","statusText","clone","response","redirectStatuses","redirect","RangeError","location","err","message","stack","create","constructor","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","rawHeaders","getAllResponseHeaders","line","parts","key","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","module","_extends","assign","target","arguments","source","apply","btoa","charCode","str","output","block","charAt","charCodeAt","validateQuery","query","queryID","index","config","metrics","userID","globalEventData","validateIndex","validateCredentials","validateURL","_request","finalBody","user_id","event_data","Content-Type","Authorization","stringify","console","search","searchConfig","requestBody","query_id","eventData","filters","hits","res","click","clickConfig","objects","validateClickObjects","click_on","click_type","isSuggestionClick","conversion","conversionConfig","validateConversionObjects","conversion_on","setUserID","setGlobalEventData","globalEvents","setHeaders","parseHits","results","item","streamProps","_updated","_deleted","data","highlight","highlightItem","highlightValue","_source","highlightResults","filter","reduce","extractSuggestion","val","flatten","arr","flat","toFlatten","concat","getSuggestions","fields","suggestions","currentValue","suggestionsList","labelsList","populateSuggestionsList","parsedSource","some","term","includes","_promoted","defaultOption","label","_score","_index","_type","_id","field","parseField","fieldNodes","children","substring","arrayItem","suggestion","Results","rawResponse","_this","raw","setData","filteredResults","promotedData","ids","Boolean","dataItem","parseResults","total","took","hidden","promoted","customData","Observable","observers","subscribe","fn","propertiesToSubscribe","properties","unsubscribe","o","property","thisObj","scope","window","CompositeAggregationResults","setRaw","after_key","setAfterKey","afterKey","aggField","aggFieldName","buckets","bucket","doc_count","hitsData","_doc_count","_key","MIC_STATUS","REQUEST_STATUS","defaultOptions","triggerQuery","triggerSuggestionsQuery","stateChanges","Searchbase","enableAppbase","enableQuerySuggestions","appbaseConfig","querySuggestions","fuzziness","searchOperators","queryFormat","size","from","dataField","aggregationField","includeFields","excludeFields","transformQuery","transformSuggestionsQuery","transformRequest","transformResponse","beforeValueChange","sortBy","nestedField","sortOptions","sortByField","highlightField","micOptions","prevStatus","_micStatus","SpeechRecognition","webkitSpeechRecognition","_setMicStatus","_micInstance","_stopMic","continuous","interimResults","start","onstart","onresult","isFinal","_handleVoiceResults","_analyticsInstance","_queryId","transcript","setValue","stop","_applyOptions","sourceSuggestions","getDataFields","AppbaseAnalytics","Number","requestStatus","suggestionsRequestStatus","_parseSuggestions","_parseQuerySuggestions","aggregationData","Accept","subscribeToStateChanges","unsubscribeToStateChanges","prev","setSize","setFrom","setFuzziness","setIncludeFields","setExcludeFields","setSortBy","setSortByField","setNestedField","setDataField","setResults","setSuggestions","performUpdate","_this2","warn","handleError","_this3","_setError","_updateQuery","_setRequestStatus","finalQuery","_fetchRequest","rawResults","SearchResult","_this4","_setSuggestionsError","_updateSuggestionsQuery","_setSuggestionsRequestStatus","suggestionsQuery","rawSuggestions","DataSearch","getSuggestionsQuery","rawQuerySuggestions","_handleQuerySuggestionsResponse","aggregations","_handleCompositeAggsResponse","id","defaultQuery","sort","count","order","aggsResponse","_handleTransformResponse","_handleTransformRequest","requestOptions","DataSearch__suggestions","isQuerySuggestionsAPI","_this5","finalRequestOptions","timestamp","Date","now","suffix","responseHeaders","transformedData","_timestamp","_headers","suggestionsError","queryOptions","prevQuery","_query","getAppbaseSuggestionsQuery","execute","getAppbaseResultQuery","settings","getAppbaseSettings","getPreviousQuery","recordAnalytics","customEvents","enableQueryRules","userId","react","and","finalQueryOptions","generateQueryOptions","match_all","highlightQuery","_suggestionsQuery","getPreviousSuggestionsQuery","prevValue","nextValue","onMicStatusChange","onQueryChange","onSuggestionsQueryChange","onValueChange","onError","onSuggestionsError","onResults","onSuggestions","onQuerySuggestions","onAggregationData","onRequestStatusChange","onSuggestionsRequestStatusChange","simple_query_string","shouldQuery","bool","should","minimum_should_match","nested","path","dataFields","weight","default_operator","multi_match","operator","highlightFields","flatHighlightedFields","pre_tags","post_tags","require_field_match","compositeAggsQuery","aggs","composite","sources","terms","top_hits","finalOptions","excludes"],"mappings":"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"}